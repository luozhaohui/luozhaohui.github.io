<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：软件开发 | 飘飘白云]]></title>
  <link href="http://luozhaohui.github.io/blog/categories/ruan-jian-kai-fa/atom.xml" rel="self"/>
  <link href="http://luozhaohui.github.io/"/>
  <updated>2023-08-21T09:43:46+08:00</updated>
  <id>http://luozhaohui.github.io/</id>
  <author>
    <name><![CDATA[飘飘白云]]></name>
    <email><![CDATA[kesalin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++ 11模板元编程实现Scheme中的list及相关函数式编程接口]]></title>
    <link href="http://luozhaohui.github.io/blog/2017/03/15/cpp-scheme/"/>
    <updated>2017-03-15T09:03:20+08:00</updated>
    <id>http://luozhaohui.github.io/blog/2017/03/15/cpp-scheme</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本文将介绍如何使用<code>C++11</code>模板元编程实现<code>Scheme</code>中的<code>list</code>及相关函数式编程接口，如<code>list</code>，<code>cons</code>，<code>car</code>，<code>cdr</code>，<code>length</code>，<code>is_empty</code>，<code>reverse</code>，<code>append</code>,<code>map</code>，<code>transform</code>，<code>enumerate</code>，<code>lambda</code>等。</p>

<h2>预备知识</h2>

<h3>Scheme简介</h3>

<p><a href="http://schemers.org/">Scheme</a>语言是<code>lisp</code>语言的一个方言(或说成变种)，它诞生于1975年的<code>MIT</code>，对于这个有近三十年历史的编程语言来说，它并没有象 C++，java，C#那样受到商业领域的青睐，在国内更是鲜为人知。但它在国外的计算机教育领域内却是有着广泛应用的，有很多人学的第一门计算机语言就 是<code>Scheme</code>语言（<a href="https://book.douban.com/subject/1148282/">SICP</a>曾经就是以<code>Scheme</code>为教学语言）。</p>

<p>它是一个小巧而又强大的语言，作为一个多用途的编程语言，它可以作为脚本语言使用，也可以作为应用软件的扩展语言来使用，它具有元语言特性，还有很多独到的特色,以致于它被称为编程语言中的"皇后"。</p>

<p>如果你对<code>Scheme</code>感兴趣，推荐使用<a href="http://racket-lang.org/">drracket</a>这个</ode>GUI</code>解释器，入门教程有：<a href="http://www.htdp.org/">How to Design Programs</a>，高级教程有：<a href="https://book.douban.com/subject/1148282/">SICP</a>。</p>

<!--more-->


<h3>Scheme中的list及相关操作</h3>

<p><code>list</code>可以说是<code>Lisp</code>系语言的根基，其名就得自于<code><strong>LIS</strong>t <strong>P</strong>rocessor</code>，其重要性就像文件概念之于<code>unix</code>。</p>

<p><code>list</code>示例：</p>

<blockquote><p>(list &ldquo;red&rdquo; &ldquo;green&rdquo; &ldquo;blue&rdquo;)<br/>
&lsquo;(&ldquo;red&rdquo; &ldquo;green&rdquo; &ldquo;blue&rdquo;)<br/>
(list 1 2 3)<br/>
&rsquo;(1 2 3)</p></blockquote>

<p>上面的语法糖<code>list</code>其实是通过递归调用点对<code>cons</code>实现的，因此上面的语法等价于：</p>

<blockquote><p>(cons &ldquo;red&rdquo; (cons &ldquo;green&rdquo; (cons &ldquo;blue&rdquo; empty)))<br/>
&lsquo;(&ldquo;red&rdquo; &ldquo;green&rdquo; &ldquo;blue&rdquo;)<br/>
(cons 1 (cons 2 (cons 3 empty)))<br/>
&rsquo;(1 2 3)</p></blockquote>

<p>另外两个重要的点对操作是<code>car</code>和<code>cdr</code>，名字有点奇怪但是是有<a href="https://en.wikipedia.org/wiki/CAR_and_CDR">历史的</a>：<strong>C</strong>urrent <strong>A</strong>ddress <strong>R</strong>egister and <strong>C</strong>urrent <strong>D</strong>ecrement <strong>R</strong>egister，其实就相当于<code>first</code>和<code>second</code>的意思。</p>

<blockquote><p>(car (cons 1 2))  ==> 1<br/>
(cdr (cons 1 2))  ==> 2</p></blockquote>

<h3>模板元编程</h3>

<p>C++中的Meta Programming，即模板元编程，是图灵完备的，而且是编译期间完成的。模板元编程通常用于编写工具库，如STL、Boost等。</p>

<p>比如通常我们使用递归来实现实现阶乘：</p>

<pre><code>#include &lt;iostream&gt;

unsigned int factorial(unsigned int n) {
    return n == 0 ? 1 : n * factorial(n - 1);
}

int main() {
    std::cout &lt;&lt; factorial(5) &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>我们也可以通过模板元编程来实现：</p>

<pre><code>#include &lt;iostream&gt;

template &lt;unsigned int n&gt;
struct factorial {
    static constexpr unsigned int value = n * factorial&lt;n - 1&gt;::value;
};

template &lt;&gt;
struct factorial&lt;0&gt; {
    static constexpr unsigned int value = 1;
};

int main() {
    std::cout &lt;&lt; factorial&lt;5&gt;::value &lt;&lt; std::endl; // 120
    return 0;
}
</code></pre>

<h2>实现</h2>

<p>本文完整代码可以在这里查看：<a href="https://github.com/luozhaohui/cpp/blob/master/cons.cpp">点击查看代码</a></p>

<h3>基本数据结构</h3>

<p>为了用模板元编程来模拟Scheme中<code>list</code>即相关操作，我们需要先定义一些模板数据结构。这些数据结构非常简单，即重新定义基本数据类型，为了简化，在这里我只特化了必须的<code>int</code>、<code>uint</code>、<code>bool</code>以及<code>empty</code>的实现。<code>empty</code>是递归实现<code>list</code>的最后一个元素，其作用相当于<code>&lsquo;\0&rsquo;</code>之于字符串。</p>

<pre><code>// type_
//
template &lt;typename T, T N&gt;
struct type_ {
    using type = type_&lt;T, N&gt;;
    using value_type = T;
    static constexpr T value = N;
};

// int_
//
template &lt;int N&gt;
struct int_ {
    using type = int_&lt;N&gt;;
    using value_type = int;
    static constexpr int value = N;
};

// uint_
//
template &lt;unsigned int N&gt;
struct uint_ {
    using type = uint_&lt;N&gt;;
    using value_type = unsigned int;
    static constexpr unsigned int value = N;
};

template &lt;&gt;
struct uint_&lt;0&gt; {
    using type = uint_&lt;0&gt;;
    using value_type = unsigned int;
    static constexpr unsigned int value = 0;
};

// bool_
template &lt;bool N&gt;
struct bool_ {
    using type = bool_&lt;N&gt;;
    using value_type = bool;
    static constexpr bool value = N;
};

// empty
//
struct empty {
    using type = empty;
    using value = empty;
};
</code></pre>

<p>下面我们先来个小示例，看看怎么使用这些模板数据结构。这个示例的作用是将仅仅用0和1表示的十进制数字当成二进制看，转换为十进制数值。如：101 转换为十进制数值为 5.</p>

<pre><code>template &lt;unsigned int N&gt;
struct binary : uint_ &lt; binary &lt; N / 10 &gt;::type::value * 2 + (N % 10) &gt; {};

template &lt;&gt;
struct binary&lt;0&gt; : uint_&lt;0&gt; {};
</code></pre>

<p>测试示例：
<code>
std::cout &lt;&lt; binary&lt;101&gt;::value &lt;&lt; std::endl;               // 5
</code></p>

<h3>cons &amp; car &amp; cdr实现</h3>

<p><code>cons</code>的实现原理很简单：就是能够递归调用自己结合成点对<code>pair</code>。在<code>Scheme</code>中示例如下：
<code>
(cons 1 (cons 2 (cons 3 '())))
</code>
其中<code>&lsquo;()</code>表示空的点对<code>pair</code>，在我们的实现里面就是<code>empty</code>。</p>

<p>因此<code>cons</code>用C++元编程实现就是：
<code>
template &lt;typename h, typename t&gt;
struct cons {
    using type = cons&lt;h, t&gt;;
    using head = h;
    using tail = t;
};
</code>
使用示例：
<code>
std::cout &lt;&lt; cons&lt;int_&lt;1&gt;, int_&lt;2&gt;&gt;::head::value &lt;&lt; std::endl;  // 1
</code></p>

<p>同样，我们可以实现用于获取<code>head</code>的<code>car</code>与获取<code>tail</code>的<code>cdr</code>操作：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct car_t {
</span><span class='line'>    template &lt;typename cons&gt;
</span><span class='line'>    struct apply {
</span><span class='line'>        using type = typename cons::type::head;
</span><span class='line'>    };
</span><span class='line'>};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;template &lt;typename cons&gt;
</span><span class='line'>struct car : car_t::template apply&lt;cons&gt;::type {};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;struct cdr_t {
</span><span class='line'>    template &lt;typename cons&gt;
</span><span class='line'>    struct apply {
</span><span class='line'>        using type = typename cons::type::tail::type;
</span><span class='line'>    };
</span><span class='line'>};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;template &lt;typename cons&gt;
</span><span class='line'>struct cdr : cdr_t::template apply&lt;cons&gt;::type {};</span></code></pre></td></tr></table></div></figure></p>

<p>使用示例：
<code>
    using c1 = cons&lt;int_&lt;1&gt;, cons&lt;int_&lt;2&gt;, int_&lt;3&gt;&gt;&gt;;
    std::cout &lt;&lt; car&lt;c1&gt;::value &lt;&lt; ", " &lt;&lt; cdr&lt;c1&gt;::head::value &lt;&lt; std::endl; // 1, 2
    std::cout &lt;&lt; car&lt;c1&gt;::value &lt;&lt; ", " &lt;&lt; car&lt;cdr&lt;c1&gt;&gt;::value &lt;&lt; std::endl; // 1, 2
</code></p>

<p>对于上面的实现，稍微解释一下：<code>car</code>是对<code>car_t</code>的封装，这样使用起来更为方便，对比如下用法就能明了，后面这样的封装手法还会用到：
<code>
car&lt;cons&lt;int_&lt;1&gt;, int_&lt;2&gt;&gt;::value                   // == 1
car_f::template apply&lt;cons&lt;int_&lt;1&gt;, int_&lt;2&gt;&gt;::value // == 1
</code></p>

<h3>list的实现</h3>

<p><code>list</code>其实一种特殊的<code>cons</code>，其实现如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>template &lt;typename first = empty, typename ...rest&gt;
</span><span class='line'>struct list_t : std::conditional &lt;
</span><span class='line'>    sizeof&hellip;(rest) == 0,
</span><span class='line'>    cons&lt;first, empty&gt;,
</span><span class='line'>    cons&lt;first, typename list_t&lt;rest...&gt;::type&gt;&gt;::type
</span><span class='line'>{};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;template &lt;&gt;
</span><span class='line'>struct list_t&lt;empty&gt; : empty {};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;template &lt;typename T, T ...elements&gt;
</span><span class='line'>struct list : list_t&lt;type&lt;em&gt;&lt;T, elements&gt;&hellip;&gt; {};</span></code></pre></td></tr></table></div></figure>
这里用到了C++11中的变长模板参数，<code>std::conditional</code>以及对<code>empty</code>的特化处理。
 - 变长模板参数：<code>list</code>接收变长模板参数<code>elements</code>，然后封装类型为成<code>type</em></code>的变长模板参数forward给<code>list_t</code>；
 - <code>std::conditional</code>：相当于<code>if &hellip; else &hellip;</code>，如果第一参数为真，则返回第二参数，否则返回第三参数；
 - &lt;第一参数中的code>sizeof&hellip;(rest)</code>：<code>sizeof</code>是C++11的新用法，用于获取变长参数的个数；
 - 第二参数的作用是终止递归；
 - 第三参数的作用是递归调用<code>list_t</code>构造点对。
 - 因为<code>empty</code>比较特殊，所以需要特化处理</p>

<p>使用示例：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>using l1 = list&lt;int, 1, 2, 3&gt;;
</span><span class='line'>using l2 = list&lt;int, 4, 5, 6, 7&gt;;
</span><span class='line'>using l3 = list_t&lt;int&lt;em&gt;&lt;1&gt;, int&lt;/em&gt;&lt;2&gt;, int_&lt;3&gt;&gt;;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;std::cout &lt;&lt; "\n&gt;list" &lt;&lt; std::endl;
</span><span class='line'>print&lt;l1&gt;();    // 1, 2, 3
</span><span class='line'>print&lt;l3&gt;();    // 1, 2, 3
</span><span class='line'>std::cout &lt;&lt; car&lt;l1&gt;::value &lt;&lt; ", " &lt;&lt; cdr&lt;l1&gt;::head::value &lt;&lt; std::endl;   // 1, 2
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;length &amp; is_empty的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;先来看看&lt;code&gt;length&lt;code&gt;的实现，其思路与list的实现一样：递归调用自身，并针对&lt;code&gt;empty&lt;/code&gt;特化处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;template &lt;typename list&gt;
</span><span class='line'>struct length_t
</span><span class='line'>{
</span><span class='line'>static constexpr unsigned int value =
</span><span class='line'>    1 + length_t&lt;typename cdr&lt;list&gt;::type&gt;::value;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;&gt;
</span><span class='line'>struct length_t&lt;empty&gt;
</span><span class='line'>{
</span><span class='line'>static constexpr unsigned int value = 0;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list&gt;
</span><span class='line'>struct length
</span><span class='line'>{
</span><span class='line'>static constexpr unsigned int value = length_t&lt;typename list::type&gt;::value;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;is_empty&lt;/code&gt;可以简单实现为判断&lt;code&gt;length&lt;/code&gt;为0：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;template &lt;typename list&gt;
</span><span class='line'>struct is_empty
</span><span class='line'>{
</span><span class='line'>static constexpr bool value = (0 == length&lt;list&gt;::value);
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当然这样的实现效率并不高，因此可以通过对&lt;code&gt;list&lt;/code&gt;以及&lt;code&gt;empty&lt;/code&gt;的特化处理来高效实现：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;template &lt;typename list&gt;
</span><span class='line'>struct is_empty_t
</span><span class='line'>{
</span><span class='line'>static constexpr bool value = false;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;&gt;
</span><span class='line'>struct is_empty_t&lt;empty&gt;
</span><span class='line'>{
</span><span class='line'>static constexpr bool value = true;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list&gt;
</span><span class='line'>struct is_empty
</span><span class='line'>{
</span><span class='line'>static constexpr bool value = is_empty_t&lt;typename list::type&gt;::value;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    std::cout &lt;&lt; "is_empty&lt;empty&gt; : " &lt;&lt; is_empty&lt;empty&gt;::value &lt;&lt; std::endl;            // 1
</span><span class='line'>std::cout &lt;&lt; "is_empty&lt;list&lt;int&gt;&gt; : " &lt;&lt; is_empty&lt;list&lt;int&gt;&gt;::value &lt;&lt; std::endl;    // 1
</span><span class='line'>std::cout &lt;&lt; "is_empty&lt;list&lt;int, 1, 2, 3&gt;&gt; : " &lt;&lt; is_empty&lt;l1&gt;::value &lt;&lt; std::endl;  // 0
</span><span class='line'>std::cout &lt;&lt; "length&lt;empty&gt; : " &lt;&lt; length&lt;empty&gt;::value &lt;&lt; std::endl;                // 0
</span><span class='line'>std::cout &lt;&lt; "length&lt;list&lt;int&gt;&gt; : " &lt;&lt; length&lt;list&lt;int&gt;&gt;::value &lt;&lt; std::endl;        // 0
</span><span class='line'>std::cout &lt;&lt; "length&lt;list&lt;int, 1, 2, 3&gt;&gt; : " &lt;&lt; length&lt;l1&gt;::value &lt;&lt; std::endl;      // 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;append &amp; reverse的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;append&lt;/code&gt;是将一个列表list2追加到已有列表list1的后面，其实现思路是递归地将car&lt;list1&gt;当做head，然后将cdr&lt;list1&gt;作为新的list1递归调用append。不要忘记特化&lt;code&gt;empty&lt;/code&gt;的情况。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct append_t {
</span><span class='line'>template &lt;typename list1, typename list2&gt;
</span><span class='line'>struct apply : cons&lt;
</span><span class='line'>    typename car&lt;list1&gt;::type,
</span><span class='line'>    typename append_t::template apply&lt;typename cdr&lt;list1&gt;::type, list2&gt;::type&gt;
</span><span class='line'>{};
</span><span class='line'>
</span><span class='line'>template&lt;typename list2&gt;
</span><span class='line'>struct apply &lt;empty, list2&gt;: list2
</span><span class='line'>{};
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list1, typename list2&gt;
</span><span class='line'>struct append : std::conditional &lt;
</span><span class='line'>is_empty&lt;list1&gt;::value,
</span><span class='line'>list2,
</span><span class='line'>append_t::template apply&lt;list1, list2&gt;
</span><span class='line'>&gt;::type
</span><span class='line'>{};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt;的实现思路与&lt;code&gt;append&lt;/code&gt;类似，只不过是要逆序罢了：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct reverse_t {
</span><span class='line'>template &lt;typename reset, typename ready&gt;
</span><span class='line'>struct apply : reverse_t::template apply&lt;
</span><span class='line'>        typename cdr&lt;reset&gt;::type,
</span><span class='line'>        cons&lt;typename car&lt;reset&gt;::type, ready&gt;&gt;
</span><span class='line'>{};
</span><span class='line'>
</span><span class='line'>template&lt;typename ready&gt;
</span><span class='line'>struct apply &lt;empty, ready&gt; : ready
</span><span class='line'>{};
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list&gt;
</span><span class='line'>struct reverse : std::conditional &lt;
</span><span class='line'>is_empty&lt;list&gt;::value,
</span><span class='line'>list,
</span><span class='line'>reverse_t::template apply&lt;typename list::type, empty&gt;
</span><span class='line'>&gt;::type
</span><span class='line'>{};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    // reverse
</span><span class='line'>using r1 = reverse&lt;l1&gt;;
</span><span class='line'>using r2 = reverse&lt;list&lt;int&gt;&gt;;
</span><span class='line'>print&lt;r1&gt;();    // 3, 2, 1
</span><span class='line'>print&lt;r2&gt;();
</span><span class='line'>
</span><span class='line'>// append
</span><span class='line'>using a1 = append&lt;l1, l2&gt;;
</span><span class='line'>using a2 = append&lt;l1, list&lt;int&gt;&gt;;
</span><span class='line'>using a3 = append&lt;list&lt;int&gt;, l1&gt;;
</span><span class='line'>print&lt;a1&gt;();    // 1, 2, 3, 4, 5, 6, 7
</span><span class='line'>print&lt;a2&gt;();    // 1, 2, 3
</span><span class='line'>print&lt;a3&gt;();    // 1, 2, 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;函数式编程&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;lisp&lt;/code&gt;系语言的最大特性就是支持函数式编程，它能够把无差别地对待数据与函数，实现了对数据与代码的同等抽象。下面我们来添加对函数式编程的支持：&lt;code&gt;enumerate&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;，&lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;lambda&lt;/code&gt; 以及 &lt;code&gt;transform&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;map的实现&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;map&lt;/code&gt;的语义是迭代地将某个方法作用于列表中的每个元素，然后得到结果&lt;code&gt;list&lt;/code&gt;。先来定义一些辅助的方法：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;template &lt;typename T, typename N&gt;
</span><span class='line'>struct plus : int_ &lt; T::value + N::value &gt; {};
</span><span class='line'>
</span><span class='line'>template &lt;typename T, typename N&gt;
</span><span class='line'>struct minus : int_ &lt; T::value - N::value &gt; {};
</span><span class='line'>
</span><span class='line'>struct inc_t {
</span><span class='line'>template &lt;typename n&gt;
</span><span class='line'>struct apply : int_ &lt; n::value + 1 &gt; {};
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename n&gt;
</span><span class='line'>struct inc : int_ &lt; n::value + 1 &gt; {};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面来看map的实现</span></code></pre></td></tr></table></div></figure>
struct map_t {
    template <typename fn, typename list>
    struct apply : cons &lt;
        typename fn::template apply&lt;typename car<list>::type>,
        map_t::template apply&lt;fn, typename cdr<list>::type>
    >{};</p>

<pre><code>template &lt;typename fn&gt;
struct apply &lt;fn, empty&gt;: empty{};
</code></pre>

<p>};</p>

<p>template <typename fn, typename list>
struct map : std::conditional &lt;
    is_empty<list>::value,
    list,
    map_t::template apply<fn, list>
    >::type
{};
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>使用示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    using m1 = map&lt;inc_t, list&lt;int, 1, 2, 3&gt;&gt;;
</span><span class='line'>    using m2 = map&lt;inc_t, list&lt;int&gt;&gt;;
</span><span class='line'>    print&lt;m1&gt;();    // 2, 3, 4
</span><span class='line'>    print&lt;m2&gt;();
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;为了让&lt;code&gt;map&lt;/code&gt;支持形如&lt;code&gt;inc&lt;/code&gt;这样的模板类，而不仅仅是形如&lt;code&gt;inc_t&lt;/code&gt;，我们需要定义一个转换器：&lt;code&gt;lambda&lt;/code&gt;：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct apply_t {
</span><span class='line'>    template &lt;template &lt;typename...&gt; class F, typename ...args&gt;
</span><span class='line'>    struct apply : F&lt;typename args::type...&gt; {};
</span><span class='line'>
</span><span class='line'>    template &lt;template &lt;typename...&gt; class F&gt;
</span><span class='line'>    struct apply &lt;F, empty&gt; : empty {};
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;template &lt;typename...&gt; class F, typename ...args&gt;
</span><span class='line'>struct apply : apply_t::template apply&lt;F, args...&gt; {};
</span><span class='line'>
</span><span class='line'>template &lt;template &lt;typename...&gt; class F&gt;
</span><span class='line'>struct lambda {
</span><span class='line'>    template &lt;typename ...args&gt;
</span><span class='line'>    struct apply : apply_t::template apply&lt;F, args...&gt; {};
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    std::cout &lt;&lt; lambda&lt;inc&gt;::template apply&lt;int_&lt;0&gt;&gt;::value &lt;&lt; std::endl;  // 1
</span><span class='line'>    using ml1 = map&lt;lambda&lt;inc&gt;, list&lt;int, 1, 2, 3&gt;&gt;;
</span><span class='line'>    print&lt;ml1&gt;();  // 2, 3, 4
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;transform的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;transform&lt;/code&gt;的语义是对迭代地将某个方法作用于两个列表上的元素，然后得到结果&lt;code&gt;list&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct transform_t {
</span><span class='line'>    template &lt;typename list1, typename list2, typename fn&gt;
</span><span class='line'>    struct apply : cons &lt;
</span><span class='line'>        typename fn::template apply&lt;
</span><span class='line'>            typename car&lt;list1&gt;::type, typename car&lt;list2&gt;::type&gt;::type,
</span><span class='line'>        typename transform_t::template apply &lt;
</span><span class='line'>            typename cdr&lt;list1&gt;::type, typename cdr&lt;list2&gt;::type, fn&gt;::type
</span><span class='line'>    &gt; {};
</span><span class='line'>
</span><span class='line'>    template &lt;typename list1, typename fn&gt;
</span><span class='line'>    struct apply&lt;list1, empty, fn&gt; : cons &lt;
</span><span class='line'>        typename fn::template apply&lt;typename car&lt;list1&gt;::type, empty&gt;,
</span><span class='line'>        typename transform_t::template apply &lt;typename cdr&lt;list1&gt;::type, empty, fn&gt;::type
</span><span class='line'>    &gt; {};
</span><span class='line'>
</span><span class='line'>    template &lt;typename list2, typename fn&gt;
</span><span class='line'>    struct apply&lt;empty, list2, fn&gt; : cons &lt;
</span><span class='line'>        typename fn::template apply&lt;empty, typename car&lt;list2&gt;::type&gt;::type,
</span><span class='line'>        typename transform_t::template apply &lt;empty, typename cdr&lt;list2&gt;::type, fn&gt;::type
</span><span class='line'>    &gt; {};
</span><span class='line'>
</span><span class='line'>    template &lt;typename fn&gt;
</span><span class='line'>    struct apply&lt;empty, empty, fn&gt; : empty {};
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list1, typename list2, typename fn&gt;
</span><span class='line'>struct transform : std::conditional &lt;
</span><span class='line'>    is_empty&lt;list1&gt;::value,
</span><span class='line'>    list1,
</span><span class='line'>    transform_t::template apply&lt;list1, list2, fn&gt;
</span><span class='line'>    &gt;::type
</span><span class='line'>{
</span><span class='line'>    static_assert(length&lt;list1&gt;::value == length&lt;list2&gt;::value, "transform: length of lists mismatch!");
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;其实现是最为复杂的，我们先来看使用示例，再来讲解实现细节。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    using t1 = list&lt;int, 1, 2, 3&gt;;
</span><span class='line'>    using t2 = list&lt;int, 3, 2, 1&gt;;
</span><span class='line'>    using ml = transform&lt;t1, t2, lambda&lt;minus&gt;&gt;;
</span><span class='line'>    using pl = transform&lt;t1, t2, lambda&lt;plus&gt;&gt;;
</span><span class='line'>    using te = transform&lt;list&lt;int&gt;, list&lt;int&gt;, lambda&lt;plus&gt;&gt;;
</span><span class='line'>    using el = transform&lt;t1, list&lt;int&gt;, lambda&lt;plus&gt;&gt;;
</span><span class='line'>    print&lt;ml&gt;();    // -2, 0, 2
</span><span class='line'>    print&lt;pl&gt;();    // 4, 4, 4
</span><span class='line'>    print&lt;te&gt;();
</span><span class='line'>    // print&lt;el&gt;(); // assertion: length mismatch!
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;实现细节：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;使用&lt;code&gt;C++11&lt;/code&gt;新特性&lt;code&gt;static_assert&lt;/code&gt;对两个列表的长度相等做断言；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;使用&lt;code&gt;std::conditional&lt;/code&gt;处理空列表，如果非空&lt;code&gt;forward&lt;/code&gt;给&lt;code&gt;transform_t&lt;/code&gt;；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;对&lt;code&gt;transform_t&lt;/code&gt;特化处理空列表的情况；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果&lt;code&gt;list1&lt;/code&gt;与&lt;code&gt;list2&lt;/code&gt;均非空，那么通过&lt;code&gt;car&lt;/code&gt;取出两个列表的&lt;code&gt;head&lt;/code&gt;作用于方法，然后递归调用&lt;code&gt;transform_t&lt;/code&gt;作用于两个列表的&lt;code&gt;tail&lt;/code&gt;。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;enumerate的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;enumerate&lt;/code&gt;的语义是迭代将某个方法作用于列表元素。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;template &lt;typename fn, typename list, bool is_empty&gt;
</span><span class='line'>struct enumerate_t;
</span><span class='line'>
</span><span class='line'>template &lt;typename fn, typename list&gt;
</span><span class='line'>void enumerate(fn f)
</span><span class='line'>{
</span><span class='line'>    enumerate_t&lt;fn, list, is_empty&lt;list&gt;::value&gt; impl;
</span><span class='line'>    impl(f);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>template &lt;typename fn, typename list, bool is_empty = false&gt;
</span><span class='line'>struct enumerate_t
</span><span class='line'>{
</span><span class='line'>    void operator()(fn f) {
</span><span class='line'>        f(car&lt;list&gt;::value);
</span><span class='line'>        enumerate&lt;fn, typename cdr&lt;list&gt;::type&gt;(f);
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename fn, typename list&gt;
</span><span class='line'>struct enumerate_t&lt;fn, list, true&gt;
</span><span class='line'>{
</span><span class='line'>    void operator()(fn f) {
</span><span class='line'>        // nothing for empty
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;enumerate&lt;/code&gt;的实现与之前的&lt;code&gt;map&lt;/code&gt;的实现很不一样，它是通过模板方法与函数子来实现的。模板方法内部调用函数子来做事情，函数子又是一个模板类，并对空列表做了特化处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    using value_type = typename car&lt;e1&gt;::value_type;
</span><span class='line'>    auto sqr_print = [](value_type val) { std::cout &lt;&lt; val * val &lt;&lt; " "; };
</span><span class='line'>    enumerate&lt;decltype(sqr_print), e1&gt;(sqr_print);      // 1 4 9
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;equal的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;equal&lt;/code&gt;用于判断两个列表是否等价。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct equal_t {
</span><span class='line'>    // both lists are not empty
</span><span class='line'>    template &lt;typename list1, typename list2, int empty_value = 0,
</span><span class='line'>        typename pred = lambda&lt;std::is_same&gt;&gt;
</span><span class='line'>    struct apply : std::conditional &lt;
</span><span class='line'>        !pred::template apply &lt;
</span><span class='line'>            typename car&lt;list1&gt;::type,
</span><span class='line'>            typename car&lt;list2&gt;::type
</span><span class='line'>            &gt;::type::value,
</span><span class='line'>        bool_&lt;false&gt;,
</span><span class='line'>        typename equal_t::template apply &lt;
</span><span class='line'>            typename cdr&lt;list1&gt;::type,
</span><span class='line'>            typename cdr&lt;list2&gt;::type,
</span><span class='line'>            (is_empty&lt;typename cdr&lt;list1&gt;::type&gt;::value
</span><span class='line'>                + is_empty&lt;typename cdr&lt;list2&gt;::type&gt;::value),
</span><span class='line'>            pred
</span><span class='line'>        &gt;::type
</span><span class='line'>    &gt; {};
</span><span class='line'>
</span><span class='line'>    // one of the list is empty.
</span><span class='line'>    template &lt;typename list1, typename list2, typename pred&gt;
</span><span class='line'>    struct apply&lt;list1, list2, 1, pred&gt;: bool_&lt;false&gt;
</span><span class='line'>    {};
</span><span class='line'>
</span><span class='line'>    // both lists are empty.
</span><span class='line'>    template &lt;typename list1, typename list2, typename pred&gt;
</span><span class='line'>    struct apply&lt;list1, list2, 2, pred&gt;: bool_&lt;true&gt;
</span><span class='line'>    {};
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list1, typename list2, typename pred = lambda&lt;std::is_same&gt;&gt;
</span><span class='line'>struct equal : equal_t::template apply&lt;list1, list2,
</span><span class='line'>    (is_empty&lt;list1&gt;::value + is_empty&lt;list2&gt;::value), pred&gt;::type
</span><span class='line'>{};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;equal&lt;/code&gt;的实现也有点复杂。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;code&gt;pred&lt;/code&gt;是等价比较谓词，默认是使用&lt;code&gt;std::is_same&lt;/code&gt;来做比较；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;关键部分依然是通过&lt;code&gt;std::conditional&lt;/code&gt;来实现的；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;第一参数是判断两个列表的&lt;code&gt;head&lt;/code&gt;是否相等；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果不等就返回第二参数；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果相等就递归比较两个列表的剩余元素；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;这里使用了一个小小的技巧来简化模板类特化的情况：如果其中一个列表为空，那么&lt;code&gt;empty_value&lt;/code&gt;为1；如果两个列表均为空，那么&lt;code&gt;empty_value&lt;/code&gt;为2，这两种情况都会调用特化版本。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    using e1 = list&lt;int, 1, 2, 3&gt;;
</span><span class='line'>    using e2 = list&lt;int, 1, 2, 3&gt;;
</span><span class='line'>    using e3 = list&lt;int, 1, 2, 1&gt;;
</span><span class='line'>    std::cout &lt;&lt; "equal&lt;e1, e2&gt; : " &lt;&lt; equal&lt;e1, e2&gt;::value &lt;&lt; std::endl;   // 1
</span><span class='line'>    std::cout &lt;&lt; "equal&lt;e1, e3&gt; : " &lt;&lt; equal&lt;e1, e3&gt;::value &lt;&lt; std::endl;   // 0
</span><span class='line'>    std::cout &lt;&lt; "equal&lt;e1, list&lt;int&gt;&gt; : " &lt;&lt; equal&lt;e1, list&lt;int&gt;&gt;::value &lt;&lt; std::endl; // 0
</span><span class='line'>    std::cout &lt;&lt; "equal&lt;list&lt;int&gt;, e1&gt; : " &lt;&lt; equal&lt;list&lt;int&gt;, e1&gt;::value &lt;&lt; std::endl; // 0
</span><span class='line'>    std::cout &lt;&lt; "equal&lt;list&lt;int&gt;, list&lt;int&gt;&gt; : " &lt;&lt; equal&lt;list&lt;int&gt;, list&lt;int&gt;&gt;::value &lt;&lt; std::endl;   // 1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;print的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;print&lt;/code&gt;是依次打印列表元素，也可以使用&lt;code&gt;enumerate&lt;/code&gt;来实现：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;template &lt;typename list, bool is_empty&gt;
</span><span class='line'>struct print_t;
</span><span class='line'>
</span><span class='line'>template &lt;typename list&gt;
</span><span class='line'>void print()
</span><span class='line'>{
</span><span class='line'>    print_t&lt;list, is_empty&lt;list&gt;::value&gt; impl;
</span><span class='line'>    impl();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>template &lt;typename list, bool is_empty = true&gt;
</span><span class='line'>struct print_t
</span><span class='line'>{
</span><span class='line'>    void operator()() {
</span><span class='line'>        std::cout &lt;&lt; std::endl;
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>template &lt;typename list&gt;
</span><span class='line'>struct print_t&lt;list, false&gt;
</span><span class='line'>{
</span><span class='line'>    void operator()() {
</span><span class='line'>        std::cout &lt;&lt; car&lt;list&gt;::value;
</span><span class='line'>        using rest = typename cdr&lt;list&gt;::type;
</span><span class='line'>        if (false == is_empty&lt;rest&gt;::value) {
</span><span class='line'>            std::cout &lt;&lt; ", ";
</span><span class='line'>        }
</span><span class='line'>        print&lt;rest&gt;();
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;print&lt;/code&gt;的实现思路与&lt;code&gt;enumerate&lt;/code&gt;，是通过模板方法与函数子来实现的。模板方法内部调用函数子来做事情，函数子又是一个模板类，并对空列表做了特化处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;总结&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;尤其是&lt;code&gt;C++&lt;/code&gt;11，14，17等新特性使得这把实用的瑞士军刀越发锋利与实用，虽然实现的形式上不如&lt;code&gt;Scheme&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt;等优雅，但它确实能够，而且无需获得语言层面上的支持。纸上得来终觉浅，绝知此事要躬行。看过本文的读者不妨自己实现一番本文中的提到的相关概念。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;参考阅读&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://book.douban.com/subject/1148282/"&gt;《计算机程序的构造与解释》&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Android框架学习资料]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://luozhaohui.github.io/blog/2015/04/02/study-android-fw/"/&gt;
</span><span class='line'>    &lt;updated&gt;2015-04-02T19:00:34+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://luozhaohui.github.io/blog/2015/04/02/study-android-fw&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;h2&gt;前言&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这两年在做一个与 Android 类似的系统（参考：&lt;a href="http://blog.csdn.net/kesalin/article/details/10474007"&gt;招聘：有兴趣做一个与Android对等的操作系统么？&lt;/a&gt;），因此有机会对 Android framework 进行系统地学习与研究。期间也阅读了一些不错的书籍与资料，特此分享在这里，或许对其他有兴趣研究 Android framework 的朋友有所帮助。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;推荐资料&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;&lt;a href="http://book.douban.com/subject/11530748/"&gt;Android开发精要&lt;/a&gt;&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这一本是作为入门本，主要是从 app 开发者的角度来介绍 framework 中的各要素，从这个角度来理解框架中哪些部分直接和 App 开发相关，又起什么作用。要仔细研究 framework 内部机制，首先从外部特性入手，这样在横向层面对 framework 有一个整体的认识与把握。第3章至第6章是这本书的精华所在，重点介绍了 Android 的组件思想以及组件之间的交互媒介 Intent。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;&lt;a href="http://book.douban.com/subject/10570841/"&gt;Android框架揭秘&lt;/a&gt;&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对比过《深入理解Android》等书籍，还是觉得这本书讲得有体系，透彻，著者非常用心。尤其是对 C++/Java 两个层面的 framework，以及对 Client/Server 的交互过程讲得比较详细。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;&lt;a href="http://blog.csdn.net/universus/article/details/6211589/"&gt;Android Bander设计与实现 - 设计篇&lt;/a&gt;&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;引用原文内容：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;这篇文章首先通过介绍 Binder 通信模型和 Binder 通信协议了解 Binder 的设计需求；然后分别阐述 Binder 在系统不同部分的表述方式和起的作用；最后还会解释 Binder 在数据接收端的设计考虑，包括线程池管理，内存映射和等待队列管理等。通过本文对 Binder 的详细介绍以及与其它 IPC 通信方式的对比，读者将对 Binder 的优势和使用 Binder 作为 Android 主要 IPC 方式的原因有深入了解。&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;&lt;a href="http://book.douban.com/subject/19986441/"&gt;Android系统源代码情景分析&lt;/a&gt;&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这是讲解 Android Binder 以及匿名共享内存最详细的书，没有之一。作者花了进200页的篇幅来透彻讲解 Binder，此外对各种组件的启动过程也介绍得相当详细，如 Activity、Service、Content Provider 等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;&lt;a href="http://book.douban.com/subject/25921329/"&gt;深入理解Android内核设计思想&lt;/a&gt;&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从操作系统的基础知识入手，讲解进程线程、内存管理、Binder 机制、Surface、SurfaceFlinger、WindowManagerService、View 体系、音频系统、输入系统等在 Android framework 中的实现原理。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[用Python编写博客导出工具]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://luozhaohui.github.io/blog/2014/10/12/export-blog-using-python-on-windows/"/&gt;
</span><span class='line'>    &lt;updated&gt;2014-10-12T08:35:02+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://luozhaohui.github.io/blog/2014/10/12/export-blog-using-python-on-windows&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;h3&gt;写在前面的话&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我在 github 上用 octopress 搭建了&lt;a href="http://kesalin.github.io/"&gt;个人博客&lt;/a&gt;，octopress 使用Markdown语法编写博文。之前我在CSDN博客上也写过不少的技术博文，都说自己的孩子再丑也是个宝，所以就起了把CSDN博客里面的文章导出到个人博客上的念头。刚开始想找个工具把CSDN博客导出为xml或文本，然后再把xml或文本转换为Markdown博文。可惜搜了一下现有博客导出工具，大部分要收费才能将全部博文导出为xml格式，所以就只好发明轮子了：写个工具将全部博文导出为Markdown博文（也是txt格式的）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我将详细介绍这个工具的编写过程，希望没有学习过编程的人也能够学会一些简单的Python语法来修改这个脚本工具，以满足他们将其他类型的博客导出为文本格式。这也是我第一次学习和使用Python，所以相信我，你一定也可以将自己的博客导出为想要的文本格式。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本文源代码在这里：&lt;a href="https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py"&gt;ExportCSDNBlog.py&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;考虑到大部分非程序员使用Windows系统，下面将介绍在Windows下如何编写这个工具。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;下载工具&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在 Windows 下安装Python开发环境（Linux/Mac下用pip安装相应包即可，程序员自己解决咯）：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;Python 2.7.3&lt;/strong&gt;&lt;br/&gt;
</span><span class='line'>请安装这个版本，更高版本的Python与一些库不兼容。&lt;br/&gt;
</span><span class='line'>&lt;a href="https://www.python.org/download/releases/2.7.3/"&gt;下载页面&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>下载完毕双击可执行文件进行安装，默认安装在C:\Python2.7。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;six&lt;/strong&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="https://pypi.python.org/pypi/six"&gt;下载页面&lt;/a&gt;
</span><span class='line'>下载完毕，解压到Python安装目录下，如C:\Python2.7\six-1.8.0目录下。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;BeautifulSoup 4.3.2&lt;/strong&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://www.crummy.com/software/BeautifulSoup/bs4/download/"&gt;下载页面&lt;/a&gt;，
</span><span class='line'>下载完毕，解压到Python安装目录下，如C:\Python2.7\BeautifulSoup目录下。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;html5lib&lt;/strong&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="https://pypi.python.org/pypi/html5lib"&gt;下载页面&lt;/a&gt;
</span><span class='line'>下载完毕，解压到Python安装目录下，如C:\Python2.7\html5lib-0.999目录下。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;安装工具&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Windows下启动命令行，依次进入如下目录，执行setup.py install进行安装：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;C:\Python2.7\six-1.8.0&gt;setup.py install  
</span><span class='line'>C:\Python2.7\html5lib-0.999&gt;setup.py install  
</span><span class='line'>C:\Python2.7\BeautifulSoup&gt;setup.py install  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;参考文档&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://docs.python.org/2/"&gt;Python 2.X文档&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html"&gt;BeautifulSoup文档&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://www.regexlab.com/zh/regref.htm"&gt;正则表达式文档&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://tool.oschina.net/regex"&gt;正则表达式在线测试&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;用到的Python语法&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个工具只用到了一些基本的Python语法，如果你没有Python基础，稍微了解一下如下博文是很有好处的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;string: 字符串操作，参考&lt;a href="http://www.cnblogs.com/sevenyuan/archive/2010/12/10/1902145.html"&gt;python: string的操作函数&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;list: 列表操作，参考&lt;a href="http://www.cnblogs.com/zhengyuxin/articles/1938300.html"&gt;Python list 操作&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;dictionary: 字典操作，参考&lt;a href="http://www.cnblogs.com/yangyongzhi/archive/2012/09/17/2688326.html"&gt;Python中dict详解&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;datetime: 日期时间，参考&lt;a href="http://www.cnblogs.com/lhj588/archive/2012/04/23/2466653.html"&gt;python datetime处理时间&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;编写博客导出工具&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;分析&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先来分析这样一个工具的需求：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;导出所有CSDN博客文章为Markdown文本。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个总需求其实可以分两步来做：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;* 获得CSDN博客文章
</span><span class='line'>* 将文章转换为Markdown文本
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;针对第一步：如何获取博客文章呢？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;打开任何一个CSDN博客，我们都可以看到下方的页面导航显示“XXX条数据 共XXX页 1 2 3 &hellip; 尾页”，我们从这个地方入手考虑。每个页面上都会显示属于该页的文章标题及文章链接，如果我们依次访问这些页面链接，就能从每个页面链接中找出属于该页面的文章标题及文章链接。这样所有的文章标题以及文章链接就都获取到了，有了这些文章链接，我们就能获取对应文章的html内容，然后通过解析这些html页面来生成相应Markdown文本了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;实现&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从上面的分析可以看出，首先我们需要根据首页获取所有的页面链接，然后遍历每一个页面链接来获取文章链接。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;获取页面链接的代码：&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="python 获取所有的页面的 url https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source"&gt;
</span><span class='line'>def getHtml(url):
</span><span class='line'>    try :
</span><span class='line'>        if gUseCookie:
</span><span class='line'>            opener = urllib2.build_opener()
</span><span class='line'>            for k, v in gHeaders.items():
</span><span class='line'>                opener.addheaders.append((k, v))
</span><span class='line'>            response = opener.open(url)
</span><span class='line'>            data = response.read().decode('utf-8')
</span><span class='line'>        else:
</span><span class='line'>            request = urllib2.Request(url, None, gHeaders)
</span><span class='line'>            response = urllib2.urlopen(request)
</span><span class='line'>            data = response.read().decode('utf-8')
</span><span class='line'>    except urllib2.URLError, e :
</span><span class='line'>        if hasattr(e, "code"):
</span><span class='line'>            print "The server couldn't fulfill the request: " + url
</span><span class='line'>            print "Error code: %s" % e.code
</span><span class='line'>        elif hasattr(e, "reason"):
</span><span class='line'>            print "We failed to reach a server. Please check your url: " + url + ", and read the Reason."
</span><span class='line'>            print "Reason: %s" % e.reason
</span><span class='line'>    return data
</span><span class='line'>
</span><span class='line'>def getPageUrlList(url):
</span><span class='line'>    page = getHtml(url)
</span><span class='line'>    soup = BeautifulSoup(page)
</span><span class='line'>
</span><span class='line'>    lastArticleHref = None
</span><span class='line'>    pageListDocs = soup.find_all(id="papelist")
</span><span class='line'>    for pageList in pageListDocs:
</span><span class='line'>        hrefDocs = pageList.find_all("a")
</span><span class='line'>        if len(hrefDocs) &gt; 0:
</span><span class='line'>            lastArticleHrefDoc = hrefDocs[len(hrefDocs) - 1]
</span><span class='line'>            lastArticleHref = lastArticleHrefDoc["href"].encode('UTF-8')
</span><span class='line'>
</span><span class='line'>    if lastArticleHref == None:
</span><span class='line'>        return []
</span><span class='line'>
</span><span class='line'>    print " &gt; last page href:" + lastArticleHref
</span><span class='line'>    lastPageIndex = lastArticleHref.rfind("/")
</span><span class='line'>    lastPageNum = int(lastArticleHref[lastPageIndex+1:])
</span><span class='line'>    urlInfo = "http://blog.csdn.net" + lastArticleHref[0:lastPageIndex]
</span><span class='line'>
</span><span class='line'>    pageUrlList = []
</span><span class='line'>    for x in xrange(1, lastPageNum + 1):
</span><span class='line'>        pageUrl = urlInfo + "/" + str(x)
</span><span class='line'>        pageUrlList.append(pageUrl)
</span><span class='line'>        log(" &gt; page " + str(x) + ": " + pageUrl)
</span><span class='line'>
</span><span class='line'>    log("total pages: " + str(len(pageUrlList)) + "\n")
</span><span class='line'>    return pageUrlList
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;参数 url = &ldquo;&lt;a href="http://blog.csdn.net/"&gt;http://blog.csdn.net/&lt;/a&gt;&rdquo; + username，即你首页的网址。通过urllib2库打开这个url发起一个web请求，从response中获取返回的html页面内容保存到data中。你可以被注释的 print data 来查看到底返回了什么内容。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;有了html页面内容，接下来就用BeautifulSoup来解析它。BeautifulSoup极大地减少了我们的工作量。我会详细在这里介绍它的使用，后面再次出现类似的解析就会从略了。soup.find_all(id=&ldquo;papelist&rdquo;) 将会查找html页面中所有id=&ldquo;papelist"的tag，然后返回包含这些tag的list。对应 CSDN 博文页面来说，只有一处地方：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="html papelist html内容示例"&gt;&lt;div id="papelist" class="pagelist"&gt;
</span><span class='line'>    &lt;span&gt; 236条数据  共12页&lt;/span&gt;
</span><span class='line'>    &lt;strong&gt;1&lt;/strong&gt; 
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/2"&gt;2&lt;/a&gt;
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/3"&gt;3&lt;/a&gt;
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/4"&gt;4&lt;/a&gt; 
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/5"&gt;5&lt;/a&gt; 
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/6"&gt;...&lt;/a&gt; 
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/2"&gt;下一页&lt;/a&gt; 
</span><span class='line'>    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/12"&gt;尾页&lt;/a&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;好，我们获得了papelist 的tag对象，通过这个tag对象我们能够找出尾页tag a对象，从这个tag a解析出对应的href属性，获得尾页的编号12，然后自己拼出所有page页面的访问url来，并保存在pageUrlList中返回。page页面的访问url形式示例如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&gt; page 1: http://blog.csdn.net/kesalin/article/list/1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;根据page来获取文章链接的代码：&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="python 根据page来获取文章链接 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source"&gt;
</span><span class='line'>def getArticleList(url):
</span><span class='line'>    # 获取所有的文章的 url/title
</span><span class='line'>    pageUrlList = getPageUrlList(url)
</span><span class='line'>
</span><span class='line'>    articleListDocs = []
</span><span class='line'>
</span><span class='line'>    strPage = " &gt; parsing page {0}"
</span><span class='line'>    for pageUrl in pageUrlList:
</span><span class='line'>        retryCount = 0
</span><span class='line'>        print " &gt; parsing page {0}".format(pageUrl)
</span><span class='line'>
</span><span class='line'>        slow_down() #访问太快会不响应
</span><span class='line'>        page = getHtml(pageUrl);
</span><span class='line'>        soup = BeautifulSoup(page)
</span><span class='line'>
</span><span class='line'>        # 获取置顶文章
</span><span class='line'>        topArticleDocs = soup.find_all(id="article_toplist")
</span><span class='line'>        if topArticleDocs != None:
</span><span class='line'>            articleListDocs = articleListDocs + topArticleDocs
</span><span class='line'>
</span><span class='line'>        # 获取文章
</span><span class='line'>        articleDocs = soup.find_all(id="article_list")
</span><span class='line'>        if articleDocs != None:
</span><span class='line'>            articleListDocs = articleListDocs + articleDocs
</span><span class='line'>
</span><span class='line'>        break
</span><span class='line'>
</span><span class='line'>    artices = []
</span><span class='line'>    topTile = "[置顶]"
</span><span class='line'>    for articleListDoc in articleListDocs:
</span><span class='line'>        linkDocs = articleListDoc.find_all("span", "link_title")
</span><span class='line'>        for linkDoc in linkDocs:
</span><span class='line'>            #print linkDoc.prettify().encode('UTF-8')
</span><span class='line'>            link = linkDoc.a
</span><span class='line'>            url = link["href"].encode('UTF-8')
</span><span class='line'>            title = link.get_text().encode('UTF-8')
</span><span class='line'>            title = title.replace(topTile, '').strip()
</span><span class='line'>            oneHref = "http://blog.csdn.net" + url
</span><span class='line'>            #log("   &gt; title:" + title + ", url:" + oneHref)
</span><span class='line'>            artices.append([oneHref, title])
</span><span class='line'>
</span><span class='line'>    log("total articles: " + str(len(artices)) + "\n")
</span><span class='line'>    return artices
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从第一步获得所有的page链接保存在pageUrlList中，接下来就根据这些page 页面来获取对应page的article链接和标题。关键代码如下面：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="python"&gt;        # 获取置顶文章
</span><span class='line'>        topArticleDocs = soup.find_all(id="article_toplist")
</span><span class='line'>        if topArticleDocs != None:
</span><span class='line'>            articleListDocs = articleListDocs + topArticleDocs
</span><span class='line'>
</span><span class='line'>        # 获取文章
</span><span class='line'>        articleDocs = soup.find_all(id="article_list")
</span><span class='line'>        if articleDocs != None:
</span><span class='line'>            articleListDocs = articleListDocs + articleDocs
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从page的html内容中查找置顶的文章（article_toplist）以及普通的文章（article_list）的tag对象，然后将这些tag保存到articleListDocs中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;article_toplist示例：(article_list的格式是类似的)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="html article_toplist html内容示例"&gt;&lt;div id="article_toplist" class="list"&gt;
</span><span class='line'>    &lt;div class="list_item article_item"&gt;
</span><span class='line'>        &lt;div class="article_title"&gt;   
</span><span class='line'>            &lt;span class="ico ico_type_Original"&gt;&lt;/span&gt;
</span><span class='line'>            &lt;h1&gt;
</span><span class='line'>                &lt;span class="link_title"&gt;
</span><span class='line'>                &lt;a href="http://luozhaohui.github.io/kesalin/article/details/10474007"&gt;
</span><span class='line'>                &lt;font color="red"&gt;[置顶]&lt;/font&gt;
</span><span class='line'>                招聘：有兴趣做一个与Android对等的操作系统么？
</span><span class='line'>                &lt;/a&gt;
</span><span class='line'>                &lt;/span&gt;
</span><span class='line'>            &lt;/h1&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        ... ...
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    ... ...
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;然后遍历所有的保存到articleListDocs里的tag对象，从中解析出link_title的span tag对象保存到linkDocs中；然后从中解析出链接的url和标题，这里去掉了置顶文章标题中的“置顶”两字；最后将url和标题保存到artices列表中返回。artices列表中的每一项内容示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   title:招聘：有兴趣做一个与Android对等的操作系统么？  
</span><span class='line'>   url:http://blog.csdn.net/kesalin/article/details/10474007
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;根据文章链接获取文章html内容并解析转换为Markdown文本&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="python 根据文章链接获取文章html内容并解析转换为Markdown文本 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source"&gt;
</span><span class='line'>def download(title, url, output):
</span><span class='line'>    # 下载文章，并保存为 markdown 格式
</span><span class='line'>    log(" &gt;&gt; download: " + url)
</span><span class='line'>
</span><span class='line'>    categories = ""
</span><span class='line'>    content = ""
</span><span class='line'>    postDate = datetime.datetime.now()
</span><span class='line'>
</span><span class='line'>    slow_down();
</span><span class='line'>    page = getHtml(url)
</span><span class='line'>    soup = BeautifulSoup(page)
</span><span class='line'>
</span><span class='line'>    manageDocs = soup.find_all("div", "article_manage")
</span><span class='line'>    for managerDoc in manageDocs:
</span><span class='line'>        categoryDoc = managerDoc.find_all("span", "link_categories")
</span><span class='line'>        if len(categoryDoc) &gt; 0:
</span><span class='line'>            categories = categoryDoc[0].a.get_text().encode('UTF-8').strip()
</span><span class='line'>
</span><span class='line'>        postDateDoc = managerDoc.find_all("span", "link_postdate")
</span><span class='line'>        if len(postDateDoc) &gt; 0:
</span><span class='line'>            postDateStr = postDateDoc[0].string.encode('UTF-8').strip()
</span><span class='line'>            postDate = datetime.datetime.strptime(postDateStr, '%Y-%m-%d %H:%M')
</span><span class='line'>
</span><span class='line'>    contentDocs = soup.find_all(id="article_content")
</span><span class='line'>    for contentDoc in contentDocs:
</span><span class='line'>        htmlContent = contentDoc.prettify().encode('UTF-8')
</span><span class='line'>        content = htmlContent2String(htmlContent)
</span><span class='line'>
</span><span class='line'>    exportToMarkdown(output, postDate, categories, title, content)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;同前面的分析类似，在这里通过访问具体文章页面获得html内容，从中解析出文章标题，分类，发表时间，文章内容信息。然后把这些内容传递给函数exportToMarkdown，在其中生成相应的Markdown文本文件。值得一提的是，在解析文章内容信息时，由于html文档内容有一些特殊的标签或转义符号，需要作特殊处理，这些特殊处理在函数htmlContent2String中进行。目前只导出了所有的文本内容，图片，url链接以及表格都没有处理，后续我会尽量完善这些转换。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="python 转换html文档内容 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source"&gt;def htmlContent2String(contentStr):
</span><span class='line'>    patternImg = re.compile(r'(&lt;img.+?src=")(.+?)(".+ /&gt;)')
</span><span class='line'>    patternHref = re.compile(r'(&lt;a.+?href=")(.+?)(".+?&gt;)(.+?)(&lt;/a&gt;)')
</span><span class='line'>    patternRemoveHtml = re.compile(r'&lt;/?[^&gt;]+&gt;')
</span><span class='line'>
</span><span class='line'>    resultContent = patternImg.sub(r'![image_mark](\2)', contentStr)
</span><span class='line'>    resultContent = patternHref.sub(r'[\4](\2)', resultContent)
</span><span class='line'>    resultContent = re.sub(patternRemoveHtml, r'', resultContent)
</span><span class='line'>    resultContent = decodeHtmlSpecialCharacter(resultContent)
</span><span class='line'>    return resultContent
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;目前仅仅是删除所有的html标签，并在函数decodeHtmlSpecialCharacter中转换转义字符。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;生成Markdown文本文件&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="python 生成Markdown文本文件 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source"&gt;def exportToMarkdown(exportDir, postdate, categories, title, content):
</span><span class='line'>    titleDate = postdate.strftime('%Y-%m-%d')
</span><span class='line'>    contentDate = postdate.strftime('%Y-%m-%d %H:%M:%S %z')
</span><span class='line'>    filename = titleDate + '-' + title
</span><span class='line'>    filename = repalceInvalidCharInFilename(filename)
</span><span class='line'>    filepath = exportDir + '/' + filename + '.markdown'
</span><span class='line'>    log(" &gt;&gt; save as " + filename)
</span><span class='line'>
</span><span class='line'>    newFile = open(unicode(filepath, "utf8"), 'w')
</span><span class='line'>    newFile.write('---' + '\n')
</span><span class='line'>    newFile.write('layout: post' + '\n')
</span><span class='line'>    newFile.write('title: \"' + title + '\"\n')
</span><span class='line'>    newFile.write('date: ' + contentDate + '\n')
</span><span class='line'>    newFile.write('comments: true' + '\n')
</span><span class='line'>    newFile.write('categories: [' + categories + ']' + '\n')
</span><span class='line'>    newFile.write('tags: [' + categories + ']' + '\n')
</span><span class='line'>    newFile.write('description: \"' + title + '\"\n')
</span><span class='line'>    newFile.write('keywords: ' + categories + '\n') 
</span><span class='line'>    newFile.write('---' + '\n\n')
</span><span class='line'>    newFile.write(content)
</span><span class='line'>    newFile.write('\n')
</span><span class='line'>    newFile.close()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;生成Markdown文本文件就很简单了，在这里我需要生成github page用的Markdown博文形式，所以内容如此，你可以根据你的需要修改为其他形式的文本内容。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Android多线程分析之五：使用AsyncTask异步下载图像]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://luozhaohui.github.io/blog/2014/07/19/android-thread-tutoria05/"/&gt;
</span><span class='line'>    &lt;updated&gt;2014-07-19T21:12:40+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://luozhaohui.github.io/blog/2014/07/19/android-thread-tutoria05&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;h2&gt;引言&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在本系列文章的第一篇&lt;a href="https://luozhaohui.github.io/blog/2014/07/08/android-thread-tutoria01/"&gt;Android多线程分析之一：使用Thread异步下载图像&lt;/a&gt;中，曾演示了如何使用 &lt;code&gt;Thread&lt;/code&gt; 来完成异步任务。&lt;code&gt;Android&lt;/code&gt; 为了简化在 &lt;code&gt;UI&lt;/code&gt; 线程中完成异步任务（毕竟 &lt;code&gt;UI&lt;/code&gt; 线程是 &lt;code&gt;app&lt;/code&gt; 最重要的线程），实现了一个名为 &lt;code&gt;AysncTask&lt;/code&gt; 的模板类。使用 &lt;code&gt;AysncTask&lt;/code&gt; 能够在异步任务进行的同时，将任务进度状态反馈给 &lt;code&gt;UI&lt;/code&gt; 线程（如让 &lt;code&gt;UI&lt;/code&gt; 线程更新进度条）。正是由于它与 &lt;code&gt;UI&lt;/code&gt; 线程紧密相关，使用的时候要就有一些限制，&lt;code&gt;AysncTask&lt;/code&gt; 必须在 &lt;code&gt;UI&lt;/code&gt; 线程中创建，并在 &lt;code&gt;UI&lt;/code&gt; 线程中启动（通过调用其 &lt;code&gt;execute()&lt;/code&gt; 方法）；此外，&lt;code&gt;AysncTask&lt;/code&gt; 设计的目的是用于一些耗时较短的任务，如果是耗时较长的任务不推荐使用 &lt;code&gt;AysncTask&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以用简化记忆 “三参数，四步骤” 来学习 &lt;code&gt;AysncTask&lt;/code&gt;。 即带有三个模板参数 &lt;code&gt;Params&lt;/code&gt;, &lt;code&gt;Progress&lt;/code&gt;, &lt;code&gt;Result&lt;/code&gt;，四个处理步骤：&lt;code&gt;onPreExecute&lt;/code&gt;，&lt;code&gt;doInBackground&lt;/code&gt;，&lt;code&gt;onProgressUpdate&lt;/code&gt;，&lt;code&gt;onPostExecute&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;简介&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;三参数&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;Params&lt;/code&gt; 是异步任务所需的参数类型，也即 &lt;code&gt;doInBackground(Params&hellip; params)&lt;/code&gt; 方法的参数类型；&lt;br/&gt;
</span><span class='line'>&lt;code&gt;Progress&lt;/code&gt; 是指进度的参数类型，也即 &lt;code&gt;onProgressUpdate(Progress&hellip; values)&lt;/code&gt; 方法的参数类型；&lt;br/&gt;
</span><span class='line'>&lt;code&gt;Result&lt;/code&gt; 是指任务完成返回的参数类型，也即 &lt;code&gt;onPostExecute(Result result)&lt;/code&gt; 或 &lt;code&gt;onCancelled(Result result)&lt;/code&gt; 方法的参数类型。&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果某一个参数类型没有意义或没有被用到，传递 &lt;code&gt;void&lt;/code&gt; 即可。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;四步骤&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;protected void onPreExecute()&lt;/code&gt;：在 &lt;code&gt;UI&lt;/code&gt; 线程中运行，在异步任务开始之前被执行，以便 &lt;code&gt;UI&lt;/code&gt; 线程完成一些初始化动作，如将进度条清零；&lt;br/&gt;
</span><span class='line'>&lt;code&gt;protected abstract Result doInBackground(Params&hellip; params)&lt;/code&gt;：在后台线程中运行，这是完成异步任务的地方，它是抽象接口，子类必须提供实现；&lt;br/&gt;
</span><span class='line'>&lt;code&gt;protected void onProgressUpdate(Progress&hellip; values)&lt;/code&gt;：在 &lt;code&gt;UI&lt;/code&gt; 线程中运行，在异步任务执行的过程中可以通过调用 &lt;code&gt;void publishProgress(Progress&hellip; values)&lt;/code&gt; 方法通知 &lt;code&gt;UI&lt;/code&gt; 线程在 &lt;code&gt;onProgressUpdate&lt;/code&gt; 方法内更新进度状态；&lt;br/&gt;
</span><span class='line'>&lt;code&gt;protected void onPostExecute(Result result)&lt;/code&gt;：在 &lt;code&gt;UI&lt;/code&gt; 线程中运行，当异步任务完成之后被执行，以便 &lt;code&gt;UI&lt;/code&gt; 线程更新任务完成状态。&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;AysncTask&lt;/code&gt; 支持取消异步任务，当异步任务被取消之后，上面的步骤四就不会被执行了，取而代之将执行 &lt;code&gt;onCancelled(Result result)&lt;/code&gt;，以便 &lt;code&gt;UI&lt;/code&gt; 线程更新任务被取消之后的状态。谨记：上面提到的这些方法都是回调函数，不需要用户手动去调用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;以前的 &lt;code&gt;AysncTask&lt;/code&gt; 是基于单一后台线程实现的，而从 &lt;code&gt;Android 3.0&lt;/code&gt; 起 &lt;code&gt;AysncTask&lt;/code&gt; 是基于 &lt;code&gt;Android&lt;/code&gt; 的并发库（&lt;code&gt;java.util.concurrent&lt;/code&gt;）实现的，本文中不会展开讨论其具体实现，只是演示如何使用 &lt;code&gt;AysncTask。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;使用示例&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;有了前面的轮廓介绍，再来使用 &lt;code&gt;AysncTask&lt;/code&gt; 是非常容易的，下面的例子与&lt;a href="https://luozhaohui.github.io/blog/2014/07/08/android-thread-tutoria01/"&gt;Android多线程分析之一：使用Thread异步下载图像&lt;/a&gt;中的例子非常相似，只不过是使用 &lt;code&gt;AysncTask&lt;/code&gt; 来完成异步任务罢了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;权限&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这是一个使用 &lt;code&gt;AysncTask&lt;/code&gt; 从网络上异步下载图片并在 &lt;code&gt;ImageView&lt;/code&gt; 中显示的的简单示例。因为需要访问网络，所以要在 &lt;code&gt;manifest.xml&lt;/code&gt; 中添加网络访问权限：
</span><span class='line'>&lt;code&gt;xml
</span><span class='line'>    &lt;uses-permission android:name="android.permission.INTERNET"&gt;
</span><span class='line'>    &lt;/uses-permission&gt;
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;布局&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;布局文件很简单，一个 &lt;code&gt;Button&lt;/code&gt;，一个 &lt;code&gt;ImageView&lt;/code&gt;：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="xml"&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    xmlns:tools="http://schemas.android.com/tools"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:padding="10dip" &gt;
</span><span class='line'>
</span><span class='line'>    &lt;Button
</span><span class='line'>        android:id="@+id/LoadButton"
</span><span class='line'>        android:layout_width="fill_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:text="Load"&gt;
</span><span class='line'>    &lt;/Button&gt;
</span><span class='line'>
</span><span class='line'>    &lt;ImageView
</span><span class='line'>        android:id="@+id/ImageVivew" 
</span><span class='line'>        android:layout_width="match_parent" 
</span><span class='line'>        android:layout_height="400dip" 
</span><span class='line'>        android:scaleType="centerInside" 
</span><span class='line'>        android:padding="2dp"&gt;
</span><span class='line'>    &lt;/ImageView&gt; 
</span><span class='line'>
</span><span class='line'>&lt;/LinearLayout&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;代码：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先来看定义：图片的 &lt;code&gt;url&lt;/code&gt; 路径，两个消息值以及一些控件：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="java"&gt;    private static final String sImageUrl = "http://fashion.qqread.com/ArtImage/20110225/0083_13.jpg";
</span><span class='line'>    private Button mLoadButton;
</span><span class='line'>    private ImageView mImageView;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;然后来看控件的设置：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="java"&gt;    protected void onCreate(Bundle savedInstanceState) {
</span><span class='line'>        super.onCreate(savedInstanceState);
</span><span class='line'>        setContentView(R.layout.activity_main);
</span><span class='line'>
</span><span class='line'>        Log.i("UI thread", " &gt;&gt; onCreate()");
</span><span class='line'>
</span><span class='line'>        mImageView = (ImageView)this.findViewById(R.id.ImageVivew);
</span><span class='line'>
</span><span class='line'>        mLoadButton = (Button)this.findViewById(R.id.LoadButton);
</span><span class='line'>        mLoadButton.setOnClickListener(new View.OnClickListener() {
</span><span class='line'>            @Override 
</span><span class='line'>            public void onClick(View v) {
</span><span class='line'>                LoadImageTask task = new LoadImageTask(v.getContext());
</span><span class='line'>                task.execute(sImageUrl);
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;LoadImageTask&lt;/code&gt; 继承自 &lt;code&gt;AysncTask&lt;/code&gt;，由这个类去完成异步图片下载任务，并相应地更新 &lt;code&gt;UI&lt;/code&gt; 状态。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="java"&gt;    class LoadImageTask extends AsyncTask&lt;String, Integer, Bitmap&gt; 
</span><span class='line'>    {
</span><span class='line'>        private ProgressDialog mProgressBar;
</span><span class='line'>
</span><span class='line'>        LoadImageTask(Context context)
</span><span class='line'>        {
</span><span class='line'>            mProgressBar = new ProgressDialog(context);
</span><span class='line'>            mProgressBar.setCancelable(true);
</span><span class='line'>            mProgressBar.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
</span><span class='line'>            mProgressBar.setMax(100);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override
</span><span class='line'>        protected Bitmap doInBackground(String... params) {
</span><span class='line'>            Log.i("Load thread", " &gt;&gt; doInBackground()");
</span><span class='line'>
</span><span class='line'>            Bitmap bitmap = null;
</span><span class='line'>
</span><span class='line'>            try{
</span><span class='line'>                publishProgress(10);
</span><span class='line'>                Thread.sleep(1000);
</span><span class='line'>
</span><span class='line'>                InputStream in = new java.net.URL(sImageUrl).openStream();
</span><span class='line'>                publishProgress(60);
</span><span class='line'>                Thread.sleep(1000);
</span><span class='line'>
</span><span class='line'>                bitmap = BitmapFactory.decodeStream(in);
</span><span class='line'>                in.close();
</span><span class='line'>            } catch (Exception e) {
</span><span class='line'>                e.printStackTrace();
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            publishProgress(100);
</span><span class='line'>            return bitmap;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override
</span><span class='line'>        protected void onCancelled() {
</span><span class='line'>            super.onCancelled();
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override
</span><span class='line'>        protected void onPreExecute() {
</span><span class='line'>
</span><span class='line'>            mProgressBar.setProgress(0);
</span><span class='line'>            mProgressBar.setMessage("Image downloading ... %0");
</span><span class='line'>            mProgressBar.show();
</span><span class='line'>
</span><span class='line'>            Log.i("UI thread", " &gt;&gt; onPreExecute()");
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        @Override
</span><span class='line'>        protected void onPostExecute(Bitmap result) {
</span><span class='line'>            Log.i("UI thread", " &gt;&gt; onPostExecute()");
</span><span class='line'>            if (result != null) {
</span><span class='line'>                mProgressBar.setMessage("Image downloading success!");
</span><span class='line'>                mImageView.setImageBitmap(result);
</span><span class='line'>            }
</span><span class='line'>            else {
</span><span class='line'>                mProgressBar.setMessage("Image downloading failure!");
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            mProgressBar.dismiss(); 
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>       @Override
</span><span class='line'>        protected void onProgressUpdate(Integer... values) {
</span><span class='line'>           Log.i("UI thread", " &gt;&gt; onProgressUpdate() %" + values[0]);
</span><span class='line'>           mProgressBar.setMessage("Image downloading ... %" + values[0]);
</span><span class='line'>           mProgressBar.setProgress(values[0]);
</span><span class='line'>        }
</span><span class='line'>    };
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在 &lt;code&gt;LoadImageTask 中，前面提到的四个步骤都涉及到了：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先在任务开始之前在 &lt;code&gt;onPreExecute()&lt;/code&gt; 方法中设置进度条的初始状态（&lt;code&gt;UI&lt;/code&gt;线程）；然后在下载线程中执行 &lt;code&gt;doInBackground()&lt;/code&gt; 以完成下载任务，并在其中调用 &lt;code&gt;publishProgress()&lt;/code&gt; 来通知 &lt;code&gt;UI&lt;/code&gt; 线程更新进度状态；&lt;code&gt;UI&lt;/code&gt; 线程在 &lt;code&gt;onProgressUpdate()&lt;/code&gt; 中得知进度，并更新进度条（&lt;code&gt;UI线程&lt;/code&gt;）；最后下载任务完成，&lt;code&gt;UI&lt;/code&gt; 线程在 &lt;code&gt;onPostExecute()&lt;/code&gt;中得知下载好的图像，并更新&lt;code&gt;UI&lt;/code&gt;显示该图像（&lt;code&gt;UI&lt;/code&gt;线程）。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Android多线程分析之四：MessageQueue的实现]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://luozhaohui.github.io/blog/2014/07/12/android-thread-tutoria04/"/&gt;
</span><span class='line'>    &lt;updated&gt;2014-07-12T20:53:20+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://luozhaohui.github.io/blog/2014/07/12/android-thread-tutoria04&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;h2&gt;引言&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在前面两篇文章&lt;a href="https://luozhaohui.github.io/blog/2014/07/10/android-thread-tutoria02/"&gt;Android多线程分析之二：Thread的实现&lt;/a&gt;，&lt;a href="https://luozhaohui.github.io/blog/2014/07/12/android-thread-tutoria03/"&gt;Android多线程分析之三：Handler，Looper的实现&lt;/a&gt;中分别介绍了 &lt;code&gt;Thread&lt;/code&gt; 的创建，运行，销毁的过程以及 &lt;code&gt;Thread&lt;/code&gt;与 &lt;code&gt;Handler&lt;/code&gt;，&lt;code&gt;Looper&lt;/code&gt; 之间的关联：&lt;code&gt;Thread&lt;/code&gt; 在其 &lt;code&gt;run()&lt;/code&gt; 方法中创建和运行消息处理循环 &lt;code&gt;Looper&lt;/code&gt;，而 &lt;code&gt;Looper::loop()&lt;/code&gt; 方法不断地从 &lt;code&gt;MessageQueue&lt;/code&gt; 中获取消息，并由 &lt;code&gt;Handler&lt;/code&gt; 分发处理该消息。接下来就来介绍 &lt;code&gt;MessageQueue&lt;/code&gt; 的运作机制。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;参考源码：&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;android/framework/base/core/java/android/os/MessageQueue.java
</span><span class='line'>android/framework/base/core/java/android/os/Message.java
</span><span class='line'>android/frameworks/base/core/jni/android_os_MessageQueue.h
</span><span class='line'>android/frameworks/base/core/jni/android_os_MessageQueue.cpp
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;构造函数及成员变量&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;先来看 &lt;code&gt;MessageQueue&lt;/code&gt; 的构造函数以及重要的成员变量：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="java"&gt;    // True if the message queue can be quit.
</span><span class='line'>    private final boolean mQuitAllowed;
</span><span class='line'>    private int mPtr; // used by native code
</span><span class='line'>    Message mMessages;
</span><span class='line'>    private boolean mQuiting;
</span><span class='line'>    // Indicates whether next() is blocked waiting in pollOnce() with a non-zero timeout.
</span><span class='line'>    private boolean mBlocked;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;mQuitAllowed&lt;/code&gt;: 其含义与 &lt;code&gt;Looper.prepare(boolean quitAllowed)&lt;/code&gt; 中参数含义一直，是否允许中止；
</span><span class='line'>&lt;code&gt;mPtr&lt;/code&gt;：&lt;code&gt;Android MessageQueue&lt;/code&gt; 是通过调用 &lt;code&gt;C++ native MessageQueue&lt;/code&gt; 实现的，这个 &lt;code&gt;mPtr&lt;/code&gt; 就是指向 &lt;code&gt;native MessageQueue&lt;/code&gt;；
</span><span class='line'>&lt;code&gt;mMessages&lt;/code&gt;：&lt;code&gt;Message&lt;/code&gt; 是链表结构的，因此这个变量就代表 &lt;code&gt;Message&lt;/code&gt; 链表；
</span><span class='line'>&lt;code&gt;mQuiting&lt;/code&gt;：是否终止了；
</span><span class='line'>&lt;code&gt;mBlocked&lt;/code&gt;：是否正在等待被激活以获取消息；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;MessageQueue&lt;/code&gt; 的构造函数很简单：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="java"&gt;    MessageQueue(boolean quitAllowed) {
</span><span class='line'>        mQuitAllowed = quitAllowed;
</span><span class='line'>        nativeInit();
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;它通过转调 &lt;code&gt;native&lt;/code&gt; 方法 &lt;code&gt;nativeInit()&lt;/code&gt; 实现的，后者是定义在 &lt;code&gt;android_os_MessageQueue.cpp&lt;/code&gt;中：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="cpp"&gt;static void android_os_MessageQueue_nativeInit(JNIEnv* env, jobject obj) {
</span><span class='line'>    NativeMessageQueue* nativeMessageQueue = new NativeMessageQueue();
</span><span class='line'>    if (!nativeMessageQueue) {
</span><span class='line'>        jniThrowRuntimeException(env, "Unable to allocate native queue");
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    nativeMessageQueue-&gt;incStrong(env);
</span><span class='line'>    android_os_MessageQueue_setNativeMessageQueue(env, obj, nativeMessageQueue);
</span><span class='line'>}
</span><span class='line'>static void android_os_MessageQueue_setNativeMessageQueue(JNIEnv* env, jobject messageQueueObj,
</span><span class='line'>        NativeMessageQueue* nativeMessageQueue) {
</span><span class='line'>    env-&gt;SetIntField(messageQueueObj, gMessageQueueClassInfo.mPtr,
</span><span class='line'>             reinterpret_cast&lt;jint&gt;(nativeMessageQueue));
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;nativeInit()&lt;/code&gt; 方法创建 &lt;code&gt;NativeMessageQueue&lt;/code&gt; 对象，并将这个对象的指针复制给 &lt;code&gt;Android MessageQueue&lt;/code&gt; 的 &lt;code&gt;mPtr&lt;/code&gt;。&lt;code&gt;NativeMessageQueue&lt;/code&gt; 的定义如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="java"&gt;class MessageQueue : public RefBase {
</span><span class='line'>public:
</span><span class='line'>    /* Gets the message queue's looper. */
</span><span class='line'>    inline sp&lt;Looper&gt; getLooper() const {
</span><span class='line'>        return mLooper;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    bool raiseAndClearException(JNIEnv* env, const char* msg);
</span><span class='line'>    virtual void raiseException(JNIEnv* env, const char* msg, jthrowable exceptionObj) = 0;
</span><span class='line'>protected:
</span><span class='line'>    MessageQueue();
</span><span class='line'>    virtual ~MessageQueue();
</span><span class='line'>protected:
</span><span class='line'>    sp&lt;Looper&gt; mLooper;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>class NativeMessageQueue : public MessageQueue {
</span><span class='line'>public:
</span><span class='line'>    NativeMessageQueue();
</span><span class='line'>    virtual ~NativeMessageQueue();
</span><span class='line'>    virtual void raiseException(JNIEnv* env, const char* msg, jthrowable exceptionObj);
</span><span class='line'>    void pollOnce(JNIEnv* env, int timeoutMillis);
</span><span class='line'>    void wake();
</span><span class='line'>
</span><span class='line'>private:
</span><span class='line'>    bool mInCallback;
</span><span class='line'>    jthrowable mExceptionObj;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;消息同步&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;其中值得关注的是 &lt;code&gt;NativeMessageQueue&lt;/code&gt; 的构造以及&lt;code&gt;pollOnce&lt;/code&gt;，&lt;code&gt;wake&lt;/code&gt; 两个方法，它们是&lt;code&gt;Java MessageQueue&lt;/code&gt; 中 &lt;code&gt;nativePollOnce&lt;/code&gt; 和 &lt;code&gt;nativeWake&lt;/code&gt; 的 &lt;code&gt;native&lt;/code&gt; 方法：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="cpp"&gt;NativeMessageQueue::NativeMessageQueue() : mInCallback(false), mExceptionObj(NULL) {
</span><span class='line'>    mLooper = Looper::getForThread();
</span><span class='line'>    if (mLooper == NULL) {
</span><span class='line'>        mLooper = new Looper(false);
</span><span class='line'>        Looper::setForThread(mLooper);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void NativeMessageQueue::pollOnce(JNIEnv* env, int timeoutMillis) {
</span><span class='line'>    mInCallback = true;
</span><span class='line'>    mLooper-&gt;pollOnce(timeoutMillis);
</span><span class='line'>    mInCallback = false;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void NativeMessageQueue::wake() {
</span><span class='line'>    mLooper-&gt;wake();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在 &lt;code&gt;NativeMessageQueue&lt;/code&gt; 的构造函数中，会获取当前线程的 &lt;code&gt;Looper&lt;/code&gt;(注意这是 &lt;code&gt;C++ Looper&lt;/code&gt;,定义在&lt;code&gt;frameworks/native/libs/utils/Looper.h&lt;/code&gt; 中)，如果当前线程还没有 &lt;code&gt;Looper&lt;/code&gt;，就创建一个，并保存在线程的 &lt;code&gt;TLS&lt;/code&gt; 中。&lt;code&gt;pollOnce&lt;/code&gt; 和 &lt;code&gt;wake&lt;/code&gt; 最终都是通过 &lt;code&gt;Linux&lt;/code&gt; 的 &lt;code&gt;epoll&lt;/code&gt; 模型来实现的。&lt;code&gt;pollOnce()&lt;/code&gt; 通过等待被激活，然后从消息队列中获取消息；&lt;code&gt;wake()&lt;/code&gt; 则是激活处于等待状态的消息队列，通知它有消息到达了。这是典型的生产者-消费者模型。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于&lt;code&gt;Android MessageQueue&lt;/code&gt; 来说，其主要的工作就是：接收投递进来的消息，获取下一个需要处理的消息。这两个功能是通过 &lt;code&gt;enqueueMessage()&lt;/code&gt; 和 &lt;code&gt;next()&lt;/code&gt; 方法实现的。&lt;code&gt;next()&lt;/code&gt; 在前一篇文章介绍 &lt;code&gt;Looper.loop()&lt;/code&gt; 时提到过。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Message&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在分析这两个函数之前，先来介绍一下 &lt;code&gt;Message&lt;/code&gt;：前面说过 &lt;code&gt;Message&lt;/code&gt; 是完备的，即它同时带有消息内容和处理消息的 &lt;code&gt;Handler&lt;/code&gt; 或 &lt;code&gt;callback&lt;/code&gt;。下面列出它的主要成员变量：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="cpp"&gt;public int what;     // 消息 id
</span><span class='line'>public int arg1;     // 消息参数
</span><span class='line'>public int arg2;     // 消息参数
</span><span class='line'>public Object obj;   // 消息参数
</span><span class='line'>long when;           // 处理延迟时间，由 Handler 的 sendMessageDelayed/postDelayed 设置
</span><span class='line'>Handler target;    // 处理消息的 Handler
</span><span class='line'>Runnable callback;   // 处理消息的回调
</span><span class='line'>Message next;    // 链表结构，指向下一个消息
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;Message&lt;/code&gt; 有一些名为 &lt;code&gt;obtain&lt;/code&gt; 的静态方法用于创建 &lt;code&gt;Message&lt;/code&gt;，通常我们都是通过 &lt;code&gt;Handler&lt;/code&gt; 的 &lt;code&gt;obtain&lt;/code&gt; 静态方法转调 &lt;code&gt;Message&lt;/code&gt; 的静态方法来创建新的 &lt;code&gt;Message&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;接下来分析 &lt;code&gt;enqueueMessage()&lt;/code&gt;enqueueMessage：</span></code></pre></td></tr></table></div></figure> java
    final boolean enqueueMessage(Message msg, long when) {
        if (msg.isInUse()) {
            throw new AndroidRuntimeException(msg + &ldquo; This message is already in use.&rdquo;);
        }
        if (msg.target == null) {
            throw new AndroidRuntimeException(&ldquo;Message must have a target.&rdquo;);
        }</p>

<pre><code>    boolean needWake;
    synchronized (this) {
        if (mQuiting) {
            return false;
        }

        msg.when = when;
        Message p = mMessages;
        if (p == null || when == 0 || when &lt; p.when) {
            // New head, wake up the event queue if blocked.
            msg.next = p;
            mMessages = msg;
            needWake = mBlocked;
        } else {
            // Inserted within the middle of the queue.  Usually we don't have to wake
            // up the event queue unless there is a barrier at the head of the queue
            // and the message is the earliest asynchronous message in the queue.
            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();
            Message prev;
            for (;;) {
                prev = p;
                p = p.next;
                if (p == null || when &lt; p.when) {
                    break;
                }
                if (needWake &amp;&amp; p.isAsynchronous()) {
                    needWake = false;
                }
            }
            msg.next = p; // invariant: p == prev.next
            prev.next = msg;
        }
    }
    if (needWake) {
        nativeWake(mPtr);
    }
    return true;
}
</code></pre>

<p>```</p>

<p>首先检测消息的合法性：是否已经在处理中和是否有处理它的 <code>Handler</code>，然后判断 <code>mQuiting</code> 是否中止了，如果没有则根据消息处理时间排序将消息插入链表中的合适位置。在这其中作了一些减少同步操作的优化，即使当前消息队列已经处于 <code>Blocked</code> 状态，且队首是一个消息屏障(和内存屏障的理念一样，这里是通过 <code>p.target == null</code> 来判断队首是否是消息屏障)，并且要插入的消息是所有异步消息中最早要处理的才会 <code>needwake</code> 激活消息队列去获取下一个消息。<code>Handler</code> 的 <code>post/sendMessage</code> 系列方法最后都是通过转调 <code>MessageQueue</code> 的 <code>enqueueMessage</code> 来实现的，比如：</p>

<pre><code class="java">    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        MessageQueue queue = mQueue;
        if (queue == null) {
            RuntimeException e = new RuntimeException(
                    this + " sendMessageAtTime() called with no mQueue");
            Log.w("Looper", e.getMessage(), e);
            return false;
        }
        return enqueueMessage(queue, msg, uptimeMillis);
    }

    private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {
        msg.target = this;
        if (mAsynchronous) {
            msg.setAsynchronous(true);
        }
        return queue.enqueueMessage(msg, uptimeMillis);
    }
</code></pre>

<p>其实 <code>Handler</code> 中与 <code>Message</code> 相关的静态方法都是通过 <code>MessageQueue</code> 的对应的静态方法实现的，比如 <code>removeMessages</code>, <code>hasMessages</code>, <code>hasCallbacks</code> 等等，这里就不一一详述了。至此，已经完整地分析了如何通过 <code>Handler</code> 提交消息到 <code>MessageQueue</code> 中了。</p>

<h2>获取消息</h2>

<p>下面来分析如何从 <code>MessageQueue</code> 中获取合适的消息, 这是 <code>next()</code> 要做的最主要的事情，<code>next()</code> 方法还做了其他一些事情，这些其它事情是为了提高系统效果，利用消息队列在空闲时通过 <code>idle handler</code> 做一些事情，比如 <code>gc</code> 等等。但它们和获取消息关系不大，所以这部分将从略介绍。</p>

<pre><code class="java">   final Message next() {
        int pendingIdleHandlerCount = -1; // -1 only during first iteration
        int nextPollTimeoutMillis = 0;

        for (;;) {
            if (nextPollTimeoutMillis != 0) {
                Binder.flushPendingCommands();
            }
            nativePollOnce(mPtr, nextPollTimeoutMillis);

            synchronized (this) {
                if (mQuiting) {
                    return null;
                }

                // Try to retrieve the next message.  Return if found.
                final long now = SystemClock.uptimeMillis();
                Message prevMsg = null;
                Message msg = mMessages;
                if (msg != null &amp;&amp; msg.target == null) {
                    // Stalled by a barrier.  Find the next asynchronous message in the queue.
                    do {
                        prevMsg = msg;
                        msg = msg.next;
                    } while (msg != null &amp;&amp; !msg.isAsynchronous());
                }
                if (msg != null) {
                    if (now &lt; msg.when) {
                        // Next message is not ready.  Set a timeout to wake up when it is ready.
                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);
                    } else {
                        // Got a message.
                        mBlocked = false;
                        if (prevMsg != null) {
                            prevMsg.next = msg.next;
                        } else {
                            mMessages = msg.next;
                        }
                        msg.next = null;
                        if (false) Log.v("MessageQueue", "Returning message: " + msg);
                        msg.markInUse();
                        return msg;
                    }
                } else {
                    // No more messages.
                    nextPollTimeoutMillis = -1;
                }

                // If first time idle, then get the number of idlers to run.
                // Idle handles only run if the queue is empty or if the first message
                // in the queue (possibly a barrier) is due to be handled in the future.
                if (pendingIdleHandlerCount &lt; 0
                        &amp;&amp; (mMessages == null || now &lt; mMessages.when)) {
                    pendingIdleHandlerCount = mIdleHandlers.size();
                }
                if (pendingIdleHandlerCount &lt;= 0) {
                    // No idle handlers to run.  Loop and wait some more.
                    mBlocked = true;
                    continue;
                }

                if (mPendingIdleHandlers == null) {
                    mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];
                }
                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);
            }

            // Run the idle handlers.
            // We only ever reach this code block during the first iteration.
            for (int i = 0; i &lt; pendingIdleHandlerCount; i++) {
                final IdleHandler idler = mPendingIdleHandlers[i];
                mPendingIdleHandlers[i] = null; // release the reference to the handler

                boolean keep = false;
                try {
                    keep = idler.queueIdle();
                } catch (Throwable t) {
                    Log.wtf("MessageQueue", "IdleHandler threw exception", t);
                }

                if (!keep) {
                    synchronized (this) {
                        mIdleHandlers.remove(idler);
                    }
                }
            }

            // Reset the idle handler count to 0 so we do not run them again.
            pendingIdleHandlerCount = 0;

            // While calling an idle handler, a new message could have been delivered
            // so go back and look again for a pending message without waiting.
            nextPollTimeoutMillis = 0;
        }
    }
</code></pre>

<p>队列被激活之后，首先判断队首是不是消息屏障，如果是则跳过所有的同步消息，查找最先要处理的异步消息。如果第一个待处理的消息还没有到要处理的时机则设置激活等待时间；否则这个消息就是需要处理的消息，将该消息设置为 <code>inuse</code>，并将队列设置为非  <code>blocked</code> 状态，然后返回该消息。<code>next()</code> 方法是在  <code>Looper.loop()</code> 中被调用的，<code>Looper</code> 在获得要处理的消息之后就会调用和消息关联的 <code>Handler</code> 来分发消息，这里再回顾一下：</p>

<pre><code class="java">  public static void loop() {
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
        }
        final MessageQueue queue = me.mQueue;
        ...
        for (;;) {
            Message msg = queue.next(); // might block
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }

            msg.target.dispatchMessage(msg);

            msg.recycle();
        }
    }
</code></pre>

<p>如果队列中没有消息或者第一个待处理的消息时机未到，且也没有其他利用队列空闲要处理的事务，则将队列设置为设置 <code>blocked</code> 状态，进入等待状态；否则就利用队列空闲处理其它事务。</p>

<p>至此，已经对 <code>Android</code> 多线程相关的主要概念 <code>Thread</code>, <code>HandlerThread</code>, <code>Handler</code>, <code>Looper</code>, <code>Message</code>, <code>MessageQueue</code> 作了一番介绍，下一篇就要讲讲 <code>AsyncTask</code>，这是为了简化 <code>UI</code> 多线程编程为提供的一个便利工具类。</p>
]]></content>
  </entry>
  
</feed>
