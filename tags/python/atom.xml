<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签：Python | 飘飘白云]]></title>
  <link href="http://luozhaohui.github.io/tags/python/atom.xml" rel="self"/>
  <link href="http://luozhaohui.github.io/"/>
  <updated>2023-08-18T09:15:14+08:00</updated>
  <id>http://luozhaohui.github.io/</id>
  <author>
    <name><![CDATA[飘飘白云]]></name>
    <email><![CDATA[kesalin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Python编写博客导出工具]]></title>
    <link href="http://luozhaohui.github.io/blog/2014/10/12/export-blog-using-python-on-windows/"/>
    <updated>2014-10-12T08:35:02+08:00</updated>
    <id>http://luozhaohui.github.io/blog/2014/10/12/export-blog-using-python-on-windows</id>
    <content type="html"><![CDATA[<h3>写在前面的话</h3>

<p>我在 github 上用 octopress 搭建了<a href="http://kesalin.github.io/">个人博客</a>，octopress 使用Markdown语法编写博文。之前我在CSDN博客上也写过不少的技术博文，都说自己的孩子再丑也是个宝，所以就起了把CSDN博客里面的文章导出到个人博客上的念头。刚开始想找个工具把CSDN博客导出为xml或文本，然后再把xml或文本转换为Markdown博文。可惜搜了一下现有博客导出工具，大部分要收费才能将全部博文导出为xml格式，所以就只好发明轮子了：写个工具将全部博文导出为Markdown博文（也是txt格式的）。</p>

<p>我将详细介绍这个工具的编写过程，希望没有学习过编程的人也能够学会一些简单的Python语法来修改这个脚本工具，以满足他们将其他类型的博客导出为文本格式。这也是我第一次学习和使用Python，所以相信我，你一定也可以将自己的博客导出为想要的文本格式。</p>

<p>本文源代码在这里：<a href="https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py">ExportCSDNBlog.py</a></p>

<!--more-->


<p>考虑到大部分非程序员使用Windows系统，下面将介绍在Windows下如何编写这个工具。</p>

<h3>下载工具</h3>

<p>在 Windows 下安装Python开发环境（Linux/Mac下用pip安装相应包即可，程序员自己解决咯）：</p>

<p><strong>Python 2.7.3</strong><br/>
请安装这个版本，更高版本的Python与一些库不兼容。<br/>
<a href="https://www.python.org/download/releases/2.7.3/">下载页面</a><br/>
下载完毕双击可执行文件进行安装，默认安装在C:\Python2.7。</p>

<p><strong>six</strong><br/>
<a href="https://pypi.python.org/pypi/six">下载页面</a>
下载完毕，解压到Python安装目录下，如C:\Python2.7\six-1.8.0目录下。</p>

<p><strong>BeautifulSoup 4.3.2</strong><br/>
<a href="http://www.crummy.com/software/BeautifulSoup/bs4/download/">下载页面</a>，
下载完毕，解压到Python安装目录下，如C:\Python2.7\BeautifulSoup目录下。</p>

<p><strong>html5lib</strong><br/>
<a href="https://pypi.python.org/pypi/html5lib">下载页面</a>
下载完毕，解压到Python安装目录下，如C:\Python2.7\html5lib-0.999目录下。</p>

<h3>安装工具</h3>

<p>Windows下启动命令行，依次进入如下目录，执行setup.py install进行安装：</p>

<pre><code>C:\Python2.7\six-1.8.0&gt;setup.py install  
C:\Python2.7\html5lib-0.999&gt;setup.py install  
C:\Python2.7\BeautifulSoup&gt;setup.py install  
</code></pre>

<h3>参考文档</h3>

<p><a href="https://docs.python.org/2/">Python 2.X文档</a><br/>
<a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">BeautifulSoup文档</a><br/>
<a href="http://www.regexlab.com/zh/regref.htm">正则表达式文档</a><br/>
<a href="http://tool.oschina.net/regex">正则表达式在线测试</a></p>

<h3>用到的Python语法</h3>

<p>这个工具只用到了一些基本的Python语法，如果你没有Python基础，稍微了解一下如下博文是很有好处的。</p>

<ul>
<li>string: 字符串操作，参考<a href="http://www.cnblogs.com/sevenyuan/archive/2010/12/10/1902145.html">python: string的操作函数</a></li>
<li>list: 列表操作，参考<a href="http://www.cnblogs.com/zhengyuxin/articles/1938300.html">Python list 操作</a></li>
<li>dictionary: 字典操作，参考<a href="http://www.cnblogs.com/yangyongzhi/archive/2012/09/17/2688326.html">Python中dict详解</a></li>
<li>datetime: 日期时间，参考<a href="http://www.cnblogs.com/lhj588/archive/2012/04/23/2466653.html">python datetime处理时间</a></li>
</ul>


<p><br/></p>

<h3>编写博客导出工具</h3>

<h4>分析</h4>

<p>首先来分析这样一个工具的需求：</p>

<pre><code>导出所有CSDN博客文章为Markdown文本。
</code></pre>

<p>这个总需求其实可以分两步来做：</p>

<pre><code>* 获得CSDN博客文章
* 将文章转换为Markdown文本
</code></pre>

<p>针对第一步：如何获取博客文章呢？</p>

<p>打开任何一个CSDN博客，我们都可以看到下方的页面导航显示“XXX条数据 共XXX页 1 2 3 &hellip; 尾页”，我们从这个地方入手考虑。每个页面上都会显示属于该页的文章标题及文章链接，如果我们依次访问这些页面链接，就能从每个页面链接中找出属于该页面的文章标题及文章链接。这样所有的文章标题以及文章链接就都获取到了，有了这些文章链接，我们就能获取对应文章的html内容，然后通过解析这些html页面来生成相应Markdown文本了。</p>

<h4>实现</h4>

<p>从上面的分析可以看出，首先我们需要根据首页获取所有的页面链接，然后遍历每一个页面链接来获取文章链接。</p>

<ul>
<li>获取页面链接的代码：</li>
</ul>


<pre><code class="python 获取所有的页面的 url https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source">
def getHtml(url):
    try :
        if gUseCookie:
            opener = urllib2.build_opener()
            for k, v in gHeaders.items():
                opener.addheaders.append((k, v))
            response = opener.open(url)
            data = response.read().decode('utf-8')
        else:
            request = urllib2.Request(url, None, gHeaders)
            response = urllib2.urlopen(request)
            data = response.read().decode('utf-8')
    except urllib2.URLError, e :
        if hasattr(e, "code"):
            print "The server couldn't fulfill the request: " + url
            print "Error code: %s" % e.code
        elif hasattr(e, "reason"):
            print "We failed to reach a server. Please check your url: " + url + ", and read the Reason."
            print "Reason: %s" % e.reason
    return data

def getPageUrlList(url):
    page = getHtml(url)
    soup = BeautifulSoup(page)

    lastArticleHref = None
    pageListDocs = soup.find_all(id="papelist")
    for pageList in pageListDocs:
        hrefDocs = pageList.find_all("a")
        if len(hrefDocs) &gt; 0:
            lastArticleHrefDoc = hrefDocs[len(hrefDocs) - 1]
            lastArticleHref = lastArticleHrefDoc["href"].encode('UTF-8')

    if lastArticleHref == None:
        return []

    print " &gt; last page href:" + lastArticleHref
    lastPageIndex = lastArticleHref.rfind("/")
    lastPageNum = int(lastArticleHref[lastPageIndex+1:])
    urlInfo = "http://blog.csdn.net" + lastArticleHref[0:lastPageIndex]

    pageUrlList = []
    for x in xrange(1, lastPageNum + 1):
        pageUrl = urlInfo + "/" + str(x)
        pageUrlList.append(pageUrl)
        log(" &gt; page " + str(x) + ": " + pageUrl)

    log("total pages: " + str(len(pageUrlList)) + "\n")
    return pageUrlList
</code></pre>

<p>参数 url = &ldquo;<a href="http://blog.csdn.net/">http://blog.csdn.net/</a>&rdquo; + username，即你首页的网址。通过urllib2库打开这个url发起一个web请求，从response中获取返回的html页面内容保存到data中。你可以被注释的 print data 来查看到底返回了什么内容。</p>

<p>有了html页面内容，接下来就用BeautifulSoup来解析它。BeautifulSoup极大地减少了我们的工作量。我会详细在这里介绍它的使用，后面再次出现类似的解析就会从略了。soup.find_all(id=&ldquo;papelist&rdquo;) 将会查找html页面中所有id=&ldquo;papelist"的tag，然后返回包含这些tag的list。对应 CSDN 博文页面来说，只有一处地方：</p>

<pre><code class="html papelist html内容示例">&lt;div id="papelist" class="pagelist"&gt;
    &lt;span&gt; 236条数据  共12页&lt;/span&gt;
    &lt;strong&gt;1&lt;/strong&gt; 
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/2"&gt;2&lt;/a&gt;
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/3"&gt;3&lt;/a&gt;
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/4"&gt;4&lt;/a&gt; 
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/5"&gt;5&lt;/a&gt; 
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/6"&gt;...&lt;/a&gt; 
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/2"&gt;下一页&lt;/a&gt; 
    &lt;a href="http://luozhaohui.github.io/kesalin/article/list/12"&gt;尾页&lt;/a&gt;
&lt;/div&gt;
</code></pre>

<p>好，我们获得了papelist 的tag对象，通过这个tag对象我们能够找出尾页tag a对象，从这个tag a解析出对应的href属性，获得尾页的编号12，然后自己拼出所有page页面的访问url来，并保存在pageUrlList中返回。page页面的访问url形式示例如下：</p>

<pre><code>&gt; page 1: http://blog.csdn.net/kesalin/article/list/1
</code></pre>

<ul>
<li>根据page来获取文章链接的代码：</li>
</ul>


<pre><code class="python 根据page来获取文章链接 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source">
def getArticleList(url):
    # 获取所有的文章的 url/title
    pageUrlList = getPageUrlList(url)

    articleListDocs = []

    strPage = " &gt; parsing page {0}"
    for pageUrl in pageUrlList:
        retryCount = 0
        print " &gt; parsing page {0}".format(pageUrl)

        slow_down() #访问太快会不响应
        page = getHtml(pageUrl);
        soup = BeautifulSoup(page)

        # 获取置顶文章
        topArticleDocs = soup.find_all(id="article_toplist")
        if topArticleDocs != None:
            articleListDocs = articleListDocs + topArticleDocs

        # 获取文章
        articleDocs = soup.find_all(id="article_list")
        if articleDocs != None:
            articleListDocs = articleListDocs + articleDocs

        break

    artices = []
    topTile = "[置顶]"
    for articleListDoc in articleListDocs:
        linkDocs = articleListDoc.find_all("span", "link_title")
        for linkDoc in linkDocs:
            #print linkDoc.prettify().encode('UTF-8')
            link = linkDoc.a
            url = link["href"].encode('UTF-8')
            title = link.get_text().encode('UTF-8')
            title = title.replace(topTile, '').strip()
            oneHref = "http://blog.csdn.net" + url
            #log("   &gt; title:" + title + ", url:" + oneHref)
            artices.append([oneHref, title])

    log("total articles: " + str(len(artices)) + "\n")
    return artices
</code></pre>

<p>从第一步获得所有的page链接保存在pageUrlList中，接下来就根据这些page 页面来获取对应page的article链接和标题。关键代码如下面：</p>

<pre><code class="python">        # 获取置顶文章
        topArticleDocs = soup.find_all(id="article_toplist")
        if topArticleDocs != None:
            articleListDocs = articleListDocs + topArticleDocs

        # 获取文章
        articleDocs = soup.find_all(id="article_list")
        if articleDocs != None:
            articleListDocs = articleListDocs + articleDocs
</code></pre>

<p>从page的html内容中查找置顶的文章（article_toplist）以及普通的文章（article_list）的tag对象，然后将这些tag保存到articleListDocs中。</p>

<p>article_toplist示例：(article_list的格式是类似的)</p>

<pre><code class="html article_toplist html内容示例">&lt;div id="article_toplist" class="list"&gt;
    &lt;div class="list_item article_item"&gt;
        &lt;div class="article_title"&gt;   
            &lt;span class="ico ico_type_Original"&gt;&lt;/span&gt;
            &lt;h1&gt;
                &lt;span class="link_title"&gt;
                &lt;a href="http://luozhaohui.github.io/kesalin/article/details/10474007"&gt;
                &lt;font color="red"&gt;[置顶]&lt;/font&gt;
                招聘：有兴趣做一个与Android对等的操作系统么？
                &lt;/a&gt;
                &lt;/span&gt;
            &lt;/h1&gt;
        &lt;/div&gt;
        ... ...
    &lt;/div&gt;
    ... ...
&lt;/div&gt;
</code></pre>

<p>然后遍历所有的保存到articleListDocs里的tag对象，从中解析出link_title的span tag对象保存到linkDocs中；然后从中解析出链接的url和标题，这里去掉了置顶文章标题中的“置顶”两字；最后将url和标题保存到artices列表中返回。artices列表中的每一项内容示例：</p>

<pre><code>   title:招聘：有兴趣做一个与Android对等的操作系统么？  
   url:http://blog.csdn.net/kesalin/article/details/10474007
</code></pre>

<ul>
<li>根据文章链接获取文章html内容并解析转换为Markdown文本</li>
</ul>


<pre><code class="python 根据文章链接获取文章html内容并解析转换为Markdown文本 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source">
def download(title, url, output):
    # 下载文章，并保存为 markdown 格式
    log(" &gt;&gt; download: " + url)

    categories = ""
    content = ""
    postDate = datetime.datetime.now()

    slow_down();
    page = getHtml(url)
    soup = BeautifulSoup(page)

    manageDocs = soup.find_all("div", "article_manage")
    for managerDoc in manageDocs:
        categoryDoc = managerDoc.find_all("span", "link_categories")
        if len(categoryDoc) &gt; 0:
            categories = categoryDoc[0].a.get_text().encode('UTF-8').strip()

        postDateDoc = managerDoc.find_all("span", "link_postdate")
        if len(postDateDoc) &gt; 0:
            postDateStr = postDateDoc[0].string.encode('UTF-8').strip()
            postDate = datetime.datetime.strptime(postDateStr, '%Y-%m-%d %H:%M')

    contentDocs = soup.find_all(id="article_content")
    for contentDoc in contentDocs:
        htmlContent = contentDoc.prettify().encode('UTF-8')
        content = htmlContent2String(htmlContent)

    exportToMarkdown(output, postDate, categories, title, content)
</code></pre>

<p>同前面的分析类似，在这里通过访问具体文章页面获得html内容，从中解析出文章标题，分类，发表时间，文章内容信息。然后把这些内容传递给函数exportToMarkdown，在其中生成相应的Markdown文本文件。值得一提的是，在解析文章内容信息时，由于html文档内容有一些特殊的标签或转义符号，需要作特殊处理，这些特殊处理在函数htmlContent2String中进行。目前只导出了所有的文本内容，图片，url链接以及表格都没有处理，后续我会尽量完善这些转换。</p>

<pre><code class="python 转换html文档内容 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source">def htmlContent2String(contentStr):
    patternImg = re.compile(r'(&lt;img.+?src=")(.+?)(".+ /&gt;)')
    patternHref = re.compile(r'(&lt;a.+?href=")(.+?)(".+?&gt;)(.+?)(&lt;/a&gt;)')
    patternRemoveHtml = re.compile(r'&lt;/?[^&gt;]+&gt;')

    resultContent = patternImg.sub(r'![image_mark](\2)', contentStr)
    resultContent = patternHref.sub(r'[\4](\2)', resultContent)
    resultContent = re.sub(patternRemoveHtml, r'', resultContent)
    resultContent = decodeHtmlSpecialCharacter(resultContent)
    return resultContent
</code></pre>

<p>目前仅仅是删除所有的html标签，并在函数decodeHtmlSpecialCharacter中转换转义字符。</p>

<ul>
<li>生成Markdown文本文件</li>
</ul>


<pre><code class="python 生成Markdown文本文件 https://github.com/luozhaohui/python/blob/master/exportCSDNBlogAsMarkdown.py View Source">def exportToMarkdown(exportDir, postdate, categories, title, content):
    titleDate = postdate.strftime('%Y-%m-%d')
    contentDate = postdate.strftime('%Y-%m-%d %H:%M:%S %z')
    filename = titleDate + '-' + title
    filename = repalceInvalidCharInFilename(filename)
    filepath = exportDir + '/' + filename + '.markdown'
    log(" &gt;&gt; save as " + filename)

    newFile = open(unicode(filepath, "utf8"), 'w')
    newFile.write('---' + '\n')
    newFile.write('layout: post' + '\n')
    newFile.write('title: \"' + title + '\"\n')
    newFile.write('date: ' + contentDate + '\n')
    newFile.write('comments: true' + '\n')
    newFile.write('categories: [' + categories + ']' + '\n')
    newFile.write('tags: [' + categories + ']' + '\n')
    newFile.write('description: \"' + title + '\"\n')
    newFile.write('keywords: ' + categories + '\n') 
    newFile.write('---' + '\n\n')
    newFile.write(content)
    newFile.write('\n')
    newFile.close()
</code></pre>

<p>生成Markdown文本文件就很简单了，在这里我需要生成github page用的Markdown博文形式，所以内容如此，你可以根据你的需要修改为其他形式的文本内容。</p>
]]></content>
  </entry>
  
</feed>
